// Generated by purs bundle 0.13.8
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];              
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];                
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 207, column 28): " + [ v.constructor.name ]);
      });
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["showMaybe"] = showMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                                                      
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $17 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($18) {
                  return $17(Data_Either.Left.create($18));
              };
          })());
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                         
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];         
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $90 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($91) {
                      return $90(Data_Either.Left.create($91));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $92 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($93) {
              return ExceptT($92(Data_Either.Right.create($93)));
          };
      })());
  };
  var monadEffectExceptT = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadExceptT(dictMonadEffect.Monad0());
      }, (function () {
          var $94 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
          var $95 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($96) {
              return $94($95($96));
          };
      })());
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $102 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($103) {
              return ExceptT($102(Data_Either.Left.create($103)));
          };
      })());
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadThrowExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                  var v1 = k(a);
                  return v1;
              })((function () {
                  var $104 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($105) {
                      return $104(Data_Either.Right.create($105));
                  };
              })()));
          };
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffectExceptT"] = monadEffectExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, function (v) {
          return mempty(dictMonoid);
      });
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var under = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  var $75 = unwrap(dictNewtype1);
                  var $76 = wrap(dictNewtype);
                  return function ($77) {
                      return $75(f($76($77)));
                  };
              };
          };
      };
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap(dictNewtype);
      };
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["un"] = un;
  exports["alaF"] = alaF;
  exports["under"] = under;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT((function () {
          var $2 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
          return function ($3) {
              return Data_Identity.Identity(f($2($3)));
          };
      })());
  };
  exports["runExcept"] = runExcept;
  exports["mapExcept"] = mapExcept;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                      
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $112 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($113) {
                  return $112(f($113));
              };
          })());
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["monadStateT"] = monadStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  function id(x) {
    return x;
  }                       
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(caseJsonArray);
  exports["toArray"] = toArray;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["intercalate"] = intercalate;
  exports["elem"] = elem;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  }; 
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          var $49 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
              return function (v) {
                  return f(v.value0)(y)(v.value1);
              };
          })(z);
          var $50 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($51) {
              return $49($50($51));
          };
      };
  }, function (f) {
      return function (z) {
          var $52 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
              return function (y) {
                  return f(v.value0)(v.value1)(y);
              };
          })(z);
          var $53 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create);
          return function ($54) {
              return $52($53($54));
          };
      };
  });
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];  
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $19 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $20 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($21) {
                  return $19($20($21));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  }; 
  var traversableWithIndexArray = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexArray;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexArray;
  }, function () {
      return Data_Traversable.traversableArray;
  }, function (dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
  });
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };                                                                                                                                                                               
  var decodeJsonJson = new DecodeJson(Data_Either.Right.create);                                                                                       
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var decodeJArray = (function () {
      var $58 = Data_Maybe.maybe(new Data_Either.Left("Value is not an Array"))(Data_Either.Right.create);
      return function ($59) {
          return $58(Data_Argonaut_Core.toArray($59));
      };
  })();
  var decodeArray = function (dictDecodeJson) {
      return new DecodeJson((function () {
          var msg = function (i) {
              return function (m) {
                  return "Failed at index " + (Data_Show.show(Data_Show.showInt)(i) + ("): " + m));
              };
          };
          var f = function (i) {
              var $86 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(msg(i));
              var $87 = decodeJson(dictDecodeJson);
              return function ($88) {
                  return $86($87($88));
              };
          };
          var $89 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v) {
              return "Couldn't decode Array (" + v;
          });
          var $90 = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(f))(decodeJArray);
          return function ($91) {
              return $89($90($91));
          };
      })());
  };
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeArray"] = decodeArray;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];              
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var set = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictCons1) {
              return function (l) {
                  return function (b) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                      };
                  };
              };
          };
      };
  };
  var insert = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (a) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
  exports["set"] = set;
  exports["insert"] = insert;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Control_Category = $PS["Control.Category"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var GEncodeJson = function (gEncodeJson) {
      this.gEncodeJson = gEncodeJson;
  };
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };
  var gEncodeJsonNil = new GEncodeJson(function (v) {
      return function (v1) {
          return Foreign_Object.empty;
      };
  });
  var gEncodeJson = function (dict) {
      return dict.gEncodeJson;
  };                                                
  var encodeRecord = function (dictGEncodeJson) {
      return function (dictRowToList) {
          return new EncodeJson(function (rec) {
              return Data_Argonaut_Core.fromObject(gEncodeJson(dictGEncodeJson)(rec)(Type_Data_RowList.RLProxy.value));
          });
      };
  };                                                                                       
  var encodeJsonJson = new EncodeJson(Control_Category.identity(Control_Category.categoryFn));
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var encodeJsonArray = function (dictEncodeJson) {
      return new EncodeJson(function (json) {
          return Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(encodeJson(dictEncodeJson))(json));
      });
  };
  var gEncodeJsonCons = function (dictEncodeJson) {
      return function (dictGEncodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return new GEncodeJson(function (row) {
                      return function (v) {
                          return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))(encodeJson(dictEncodeJson)(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(row)))(gEncodeJson(dictGEncodeJson)(row)(Type_Data_RowList.RLProxy.value));
                      };
                  });
              };
          };
      };
  };
  exports["encodeJson"] = encodeJson;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonJson"] = encodeJsonJson;
  exports["encodeJsonArray"] = encodeJsonArray;
  exports["encodeRecord"] = encodeRecord;
  exports["gEncodeJsonNil"] = gEncodeJsonNil;
  exports["gEncodeJsonCons"] = gEncodeJsonCons;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["comparing"] = comparing;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var span = function (p) {
      return function (arr) {
          var go = function ($copy_i) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i) {
                  var v = index(arr)(i);
                  if (v instanceof Data_Maybe.Just) {
                      var $60 = p(v.value0);
                      if ($60) {
                          $copy_i = i + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return new Data_Maybe.Just(i);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 834, column 5 - line 836, column 25): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_i);
              };
              return $tco_result;
          };
          var breakIndex = go(0);
          if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          if (breakIndex instanceof Data_Maybe.Just) {
              return {
                  init: $foreign.slice(0)(breakIndex.value0)(arr),
                  rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
              };
          };
          if (breakIndex instanceof Data_Maybe.Nothing) {
              return {
                  init: arr,
                  rest: [  ]
              };
          };
          throw new Error("Failed pattern match at Data.Array (line 821, column 3 - line 827, column 30): " + [ breakIndex.constructor.name ]);
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  exports["some"] = some;
  exports["many"] = many;
  exports["head"] = head;
  exports["sortWith"] = sortWith;
  exports["dropWhile"] = dropWhile;
  exports["length"] = $foreign.length;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var unsafeFromArrayF = Unsafe_Coerce.unsafeCoerce;
  var some = function (dictAlternative) {
      return function (dictLazy) {
          var $47 = Data_Array.some(dictAlternative)(dictLazy);
          return function ($48) {
              return unsafeFromArrayF($47($48));
          };
      };
  };
  exports["some"] = some;
})(PS);
(function(exports) {
  "use strict";

  exports.fold1Impl = function (f) {
    return function (xs) {
      var acc = xs[0];
      var len = xs.length;
      for (var i = 1; i < len; i++) {
        acc = f(acc)(xs[i]);
      }
      return acc;
    };
  };
})(PS["Data.Array.NonEmpty.Internal"] = PS["Data.Array.NonEmpty.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semigroup.Foldable"] = $PS["Data.Semigroup.Foldable"] || {};
  var exports = $PS["Data.Semigroup.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Foldable1 = function (Foldable0, fold1, foldMap1) {
      this.Foldable0 = Foldable0;
      this.fold1 = fold1;
      this.foldMap1 = foldMap1;
  }; 
  var fold1 = function (dict) {
      return dict.fold1;
  };
  var foldMap1Default = function (dictFoldable1) {
      return function (dictFunctor) {
          return function (dictSemigroup) {
              return function (f) {
                  var $45 = fold1(dictFoldable1)(dictSemigroup);
                  var $46 = Data_Functor.map(dictFunctor)(f);
                  return function ($47) {
                      return $45($46($47));
                  };
              };
          };
      };
  };
  exports["Foldable1"] = Foldable1;
  exports["foldMap1Default"] = foldMap1Default;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var $foreign = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = $PS["Data.Semigroup.Foldable"];                   
  var functorNonEmptyArray = Data_Functor.functorArray;                              
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  var foldable1NonEmptyArray = new Data_Semigroup_Foldable.Foldable1(function () {
      return foldableNonEmptyArray;
  }, function (dictSemigroup) {
      return $foreign.fold1Impl(Data_Semigroup.append(dictSemigroup));
  }, function (dictSemigroup) {
      return Data_Semigroup_Foldable.foldMap1Default(foldable1NonEmptyArray)(functorNonEmptyArray)(dictSemigroup);
  });
  exports["foldable1NonEmptyArray"] = foldable1NonEmptyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Char.Unicode"] = $PS["Data.Char.Unicode"] || {};
  var exports = $PS["Data.Char.Unicode"];
  var Data_Char = $PS["Data.Char"];
  var isDigit = function (c) {
      var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
      return diff <= 9 && diff >= 0;
  };
  var isHexDigit = function (c) {
      return isDigit(c) || ((function () {
          var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
          return diff <= 5 && diff >= 0;
      })() || (function () {
          var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
          return diff <= 5 && diff >= 0;
      })());
  };
  exports["isDigit"] = isDigit;
  exports["isHexDigit"] = isHexDigit;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Const"] = $PS["Data.Const"] || {};
  var exports = $PS["Data.Const"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];                                      
  var Const = function (x) {
      return x;
  };
  var newtypeConst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Const);
  var functorConst = new Data_Functor.Functor(function (f) {
      return function (m) {
          return m;
      };
  });
  var applyConst = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorConst;
      }, function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v)(v1);
          };
      });
  };
  var applicativeConst = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyConst(dictMonoid.Semigroup0());
      }, function (v) {
          return Data_Monoid.mempty(dictMonoid);
      });
  };
  exports["Const"] = Const;
  exports["newtypeConst"] = newtypeConst;
  exports["applicativeConst"] = applicativeConst;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["from"] = from;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Generic.Rep.Show"] = $PS["Data.Generic.Rep.Show"] || {};
  var exports = $PS["Data.Generic.Rep.Show"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];                
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  }; 
  var genericShowArgsArgument = function (dictShow) {
      return new GenericShowArgs(function (v) {
          return [ Data_Show.show(dictShow)(v) ];
      });
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  }; 
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Generic.Rep.Show (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
  exports["fromString"] = fromString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Internal.Wander"] = $PS["Data.Lens.Internal.Wander"] || {};
  var exports = $PS["Data.Lens.Internal.Wander"];                            
  var Wander = function (Choice1, Strong0, wander) {
      this.Choice1 = Choice1;
      this.Strong0 = Strong0;
      this.wander = wander;
  }; 
  var wander = function (dict) {
      return dict.wander;
  };
  exports["wander"] = wander;
  exports["Wander"] = Wander;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];                  
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  }; 
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];                 
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  exports["Choice"] = Choice;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];       
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["first"] = first;
  exports["Strong"] = Strong;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Const = $PS["Data.Const"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($27) {
                  return v1(f($27));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($28) {
          return v(Data_Tuple.fst($28));
      };
  }, function (v) {
      return function ($29) {
          return v(Data_Tuple.snd($29));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  var choiceForget = function (dictMonoid) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorForget;
      }, function (v) {
          return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
      }, function (v) {
          return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
      });
  };
  var wanderForget = function (dictMonoid) {
      return new Data_Lens_Internal_Wander.Wander(function () {
          return choiceForget(dictMonoid);
      }, function () {
          return strongForget;
      }, function (f) {
          return function (v) {
              return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Const.newtypeConst)(Data_Const.newtypeConst)(Data_Const.Const)(f(Data_Const.applicativeConst(dictMonoid)))(v);
          };
      });
  };
  exports["Forget"] = Forget;
  exports["newtypeForget"] = newtypeForget;
  exports["strongForget"] = strongForget;
  exports["wanderForget"] = wanderForget;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Maybe.Last"] = $PS["Data.Maybe.Last"] || {};
  var exports = $PS["Data.Maybe.Last"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Last = function (x) {
      return x;
  };
  var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
              return v1;
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return v;
          };
          throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });                                 
  var newtypeLast = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Last);
  var monoidLast = new Data_Monoid.Monoid(function () {
      return semigroupLast;
  }, Data_Maybe.Nothing.value);
  exports["Last"] = Last;
  exports["newtypeLast"] = newtypeLast;
  exports["monoidLast"] = monoidLast;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Fold"] = $PS["Data.Lens.Fold"] || {};
  var exports = $PS["Data.Lens.Fold"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_Last = $PS["Data.Maybe.Last"];
  var Data_Newtype = $PS["Data.Newtype"];
  var foldMapOf = Data_Newtype.under(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.Forget);
  var lastOf = function (p) {
      var $91 = Data_Newtype.unwrap(Data_Maybe_Last.newtypeLast);
      var $92 = foldMapOf(p)(function ($94) {
          return Data_Maybe_Last.Last(Data_Maybe.Just.create($94));
      });
      return function ($93) {
          return $91($92($93));
      };
  };
  exports["lastOf"] = lastOf;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Show = $PS["Data.Show"];                              
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  }; 
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($169) {
          return Data_List_Types.NonEmptyList($168($169));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  }; 
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $769 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($770) {
                                  return Data_Maybe.Just.create($769($770));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["union"] = union;
})(PS);
(function(exports) {
  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["split"] = $foreign.split;
  exports["toLower"] = $foreign.toLower;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.CaseInsensitive"] = $PS["Data.String.CaseInsensitive"] || {};
  var exports = $PS["Data.String.CaseInsensitive"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_Common = $PS["Data.String.Common"];                
  var CaseInsensitiveString = function (x) {
      return x;
  }; 
  var newtypeCaseInsensitiveString = new Data_Newtype.Newtype(function (n) {
      return n;
  }, CaseInsensitiveString);
  var eqCaseInsensitiveString = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_String_Common.toLower(v) === Data_String_Common.toLower(v1);
      };
  });
  var ordCaseInsensitiveString = new Data_Ord.Ord(function () {
      return eqCaseInsensitiveString;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordString)(Data_String_Common.toLower(v))(Data_String_Common.toLower(v1));
      };
  });
  exports["ordCaseInsensitiveString"] = ordCaseInsensitiveString;
  exports["newtypeCaseInsensitiveString"] = newtypeCaseInsensitiveString;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];                
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  };                                                                                          
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["uncons"] = uncons;
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
  exports["splitAt"] = $foreign.splitAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["length"] = length;
  exports["indexOf"] = indexOf;
  exports["drop"] = drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.NonEmpty.Internal"] = $PS["Data.String.NonEmpty.Internal"] || {};
  var exports = $PS["Data.String.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];          
  var NonEmptyString = function (x) {
      return x;
  };
  var toString = function (v) {
      return v;
  }; 
  var semigroupNonEmptyString = Data_Semigroup.semigroupString;
  var joinWith = function (dictFoldable) {
      return function (splice) {
          var $48 = Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(splice);
          return function ($49) {
              return $48($49);
          };
      };
  };
  var join1With = function (dictFoldable1) {
      return function (splice) {
          var $50 = joinWith(dictFoldable1.Foldable0())(splice);
          return function ($51) {
              return NonEmptyString($50($51));
          };
      };
  };
  var fromString = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(v);
  };
  var unsafeFromString = function (dictPartial) {
      var $52 = Data_Maybe.fromJust();
      return function ($53) {
          return $52(fromString($53));
      };
  };
  var appendString = function (v) {
      return function (s2) {
          return v + s2;
      };
  };
  exports["fromString"] = fromString;
  exports["unsafeFromString"] = unsafeFromString;
  exports["toString"] = toString;
  exports["appendString"] = appendString;
  exports["joinWith"] = joinWith;
  exports["join1With"] = join1With;
  exports["semigroupNonEmptyString"] = semigroupNonEmptyString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.NonEmpty.CodeUnits"] = $PS["Data.String.NonEmpty.CodeUnits"] || {};
  var exports = $PS["Data.String.NonEmpty.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var toNonEmptyString = Unsafe_Coerce.unsafeCoerce;
  var singleton = function ($13) {
      return toNonEmptyString(Data_String_CodeUnits.singleton($13));
  };
  var liftS = Unsafe_Coerce.unsafeCoerce;
  var indexOf = function ($21) {
      return liftS(Data_String_CodeUnits.indexOf($21));
  };
  var fromNonEmptyString = Unsafe_Coerce.unsafeCoerce;
  var length = function ($22) {
      return Data_String_CodeUnits.length(fromNonEmptyString($22));
  };
  var splitAt = function (i) {
      return function (nes) {
          var v = Data_String_CodeUnits.splitAt(i)(fromNonEmptyString(nes));
          return {
              before: Data_String_NonEmpty_Internal.fromString(v.before),
              after: Data_String_NonEmpty_Internal.fromString(v.after)
          };
      };
  };
  var drop = function (i) {
      return function (nes) {
          var s = fromNonEmptyString(nes);
          var $12 = i >= Data_String_CodeUnits.length(s);
          if ($12) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(toNonEmptyString(Data_String_CodeUnits.drop(i)(s)));
      };
  };
  exports["singleton"] = singleton;
  exports["indexOf"] = indexOf;
  exports["drop"] = drop;
  exports["splitAt"] = splitAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.String.Pattern"] = $PS["Data.String.Pattern"] || {};
  var exports = $PS["Data.String.Pattern"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Pattern = function (x) {
      return x;
  };              
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);
  exports["newtypePattern"] = newtypePattern;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.These"] = $PS["Data.These"] || {};
  var exports = $PS["Data.These"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var This = (function () {
      function This(value0) {
          this.value0 = value0;
      };
      This.create = function (value0) {
          return new This(value0);
      };
      return This;
  })();
  var That = (function () {
      function That(value0) {
          this.value0 = value0;
      };
      That.create = function (value0) {
          return new That(value0);
      };
      return That;
  })();
  var Both = (function () {
      function Both(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Both.create = function (value0) {
          return function (value1) {
              return new Both(value0, value1);
          };
      };
      return Both;
  })();
  var theseRight = function (v) {
      if (v instanceof Both) {
          return new Data_Maybe.Just(v.value1);
      };
      if (v instanceof That) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var theseLeft = function (v) {
      if (v instanceof Both) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof This) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["This"] = This;
  exports["That"] = That;
  exports["Both"] = Both;
  exports["theseLeft"] = theseLeft;
  exports["theseRight"] = theseRight;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Tuple.Nested"] = $PS["Data.Tuple.Nested"] || {};
  var exports = $PS["Data.Tuple.Nested"];
  var get2 = function (v) {
      return v.value1.value0;
  };
  var get1 = function (v) {
      return v.value0;
  };
  exports["get1"] = get1;
  exports["get2"] = get2;
})(PS);
(function(exports) {
  /* global exports, require */
  /* jshint -W097 */

  'use strict';
  var pg =require("pg"); 

  // pg does strange thing converting DATE
  // value to js Date, so we have
  // to prevent this craziness
  pg.types.setTypeParser(1082 /* DATE_OID */, function(dateString) { return dateString; });

  exports.ffiNewPool = function(config) {
      return function() {
          return new pg.Pool(config);
      };
  };

  exports.ffiConnect = function (config) {
      return function (pool) {
          return function (onError, onSuccess) {
              var p = pool.connect().then(function(client) {
                  onSuccess(config.right({
                      connection: client,
                      done: function() {
                          return client.release();
                      }
                  }));
              }).catch(function(err) {
                  var pgError = config.nullableLeft(err);
                  if (pgError) {
                      onSuccess(pgError);
                  } else {
                      onError(err);
                  }
              });

              return function (cancelError, cancelerError, cancelerSuccess) {
                  p.cancel();
                  cancelerSuccess();
              };
          };
      };
  };

  exports.ffiUnsafeQuery = function(config) {
      return function(client) {
          return function(sql) {
              return function(values) {
                  return function(onError, onSuccess) {
                      var q = client.query({
                          text: sql,
                          values: values,
                          rowMode: 'array',
                      }).then(function(result) {
                          onSuccess(config.right(result));
                      }).catch(function(err) {
                          var pgError = config.nullableLeft(err);
                          if (pgError) {
                              onSuccess(pgError);
                          } else {
                              onError(err);
                          }
                      });

                      return function (cancelError, cancelerError, cancelerSuccess) {
                          q.cancel();
                          cancelerSuccess();
                      };
                  };
              };
          };
      };
  };

  exports.ffiSQLState = function (error) {
      return error.code || null;
  };

  exports.ffiErrorDetail = function (error) {
      return {
          severity: error.severity || '',
          code: error.code || '',
          message: error.message || '',
          detail: error.detail || '',
          hint: error.hint || '',
          position: error.position || '',
          internalPosition: error.internalPosition || '',
          internalQuery: error.internalQuery || '',
          where_: error.where || '',
          schema: error.schema || '',
          table: error.table || '',
          column: error.column || '',
          dataType: error.dataType || '',
          constraint: error.constraint || '',
          file: error.file || '',
          line: error.line || '',
          routine: error.routine || ''
      };
  };
})(PS["Database.PostgreSQL"] = PS["Database.PostgreSQL"] || {});
(function(exports) {
  "use strict";

  exports.unsafeToForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                                        
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Foreign (line 63, column 1 - line 67, column 89): " + [ v.constructor.name ]);
  });
  var fail = (function () {
      var $107 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity));
      return function ($108) {
          return $107(Data_List_NonEmpty.singleton($108));
      };
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
      };
  };                                            
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
      var fromNumber = (function () {
          var $109 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
          return function ($110) {
              return $109(Data_Int.fromNumber($110));
          };
      })();
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
  };
  exports["readInt"] = readInt;
  exports["showForeignError"] = showForeignError;
  exports["unsafeToForeign"] = $foreign.unsafeToForeign;
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Database.PostgreSQL.Value"] = $PS["Database.PostgreSQL.Value"] || {};
  var exports = $PS["Database.PostgreSQL.Value"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Show = $PS["Data.Show"];
  var Foreign = $PS["Foreign"];                              
  var ToSQLValue = function (toSQLValue) {
      this.toSQLValue = toSQLValue;
  };
  var FromSQLValue = function (fromSQLValue) {
      this.fromSQLValue = fromSQLValue;
  };
  var toSQLValueString = new ToSQLValue(Foreign.unsafeToForeign);
  var toSQLValueJson = new ToSQLValue(function ($25) {
      return Foreign.unsafeToForeign(Data_Argonaut_Core.stringify($25));
  });                                                            
  var toSQLValueInt = new ToSQLValue(Foreign.unsafeToForeign);    
  var toSQLValue = function (dict) {
      return dict.toSQLValue;
  };    
  var fromSQLValueJson = new FromSQLValue(function ($39) {
      return Data_Either.Right.create(Foreign.unsafeFromForeign($39));
  });
  var fromSQLValueInt = new FromSQLValue((function () {
      var $41 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Show.show(Data_List_Types.showNonEmptyList(Foreign.showForeignError)));
      return function ($42) {
          return $41(Control_Monad_Except.runExcept(Foreign.readInt($42)));
      };
  })());
  var fromSQLValue = function (dict) {
      return dict.fromSQLValue;
  };
  exports["fromSQLValue"] = fromSQLValue;
  exports["toSQLValue"] = toSQLValue;
  exports["fromSQLValueInt"] = fromSQLValueInt;
  exports["fromSQLValueJson"] = fromSQLValueJson;
  exports["toSQLValueInt"] = toSQLValueInt;
  exports["toSQLValueString"] = toSQLValueString;
  exports["toSQLValueJson"] = toSQLValueJson;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Database.PostgreSQL.Row"] = $PS["Database.PostgreSQL.Row"] || {};
  var exports = $PS["Database.PostgreSQL.Row"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Database_PostgreSQL_Value = $PS["Database.PostgreSQL.Value"];
  var Row3 = (function () {
      function Row3(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Row3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Row3(value0, value1, value2);
              };
          };
      };
      return Row3;
  })();
  var Row1 = (function () {
      function Row1(value0) {
          this.value0 = value0;
      };
      Row1.create = function (value0) {
          return new Row1(value0);
      };
      return Row1;
  })();
  var Row0 = (function () {
      function Row0() {

      };
      Row0.value = new Row0();
      return Row0;
  })();
  var ToSQLRow = function (toSQLRow) {
      this.toSQLRow = toSQLRow;
  };
  var FromSQLRow = function (fromSQLRow) {
      this.fromSQLRow = fromSQLRow;
  };
  var toSQLRowTupleTwo = function (dictToSQLValue) {
      return function (dictToSQLValue1) {
          return new ToSQLRow(function (v) {
              return [ Database_PostgreSQL_Value.toSQLValue(dictToSQLValue)(v.value0), Database_PostgreSQL_Value.toSQLValue(dictToSQLValue1)(v.value1) ];
          });
      };
  };
  var toSQLRowRow3 = function (dictToSQLValue) {
      return function (dictToSQLValue1) {
          return function (dictToSQLValue2) {
              return new ToSQLRow(function (v) {
                  return [ Database_PostgreSQL_Value.toSQLValue(dictToSQLValue)(v.value0), Database_PostgreSQL_Value.toSQLValue(dictToSQLValue1)(v.value1), Database_PostgreSQL_Value.toSQLValue(dictToSQLValue2)(v.value2) ];
              });
          };
      };
  };
  var toSQLRowRow1 = function (dictToSQLValue) {
      return new ToSQLRow(function (v) {
          return [ Database_PostgreSQL_Value.toSQLValue(dictToSQLValue)(v.value0) ];
      });
  };
  var toSQLRowRow0 = new ToSQLRow(function (v) {
      return [  ];
  });                                                                                             
  var toSQLRow = function (dict) {
      return dict.toSQLRow;
  };
  var fromSQLRowRow1 = function (dictFromSQLValue) {
      return new FromSQLRow(function (v) {
          if (v.length === 1) {
              return Control_Apply.apply(Data_Either.applyEither)(Control_Applicative.pure(Data_Either.applicativeEither)(Row1.create))(Database_PostgreSQL_Value.fromSQLValue(dictFromSQLValue)(v[0]));
          };
          var n = Data_Array.length(v);
          return Data_Either.Left.create("Row has " + (Data_Show.show(Data_Show.showInt)(n) + " fields, expecting 1."));
      });
  }; 
  var fromSQLRow = function (dict) {
      return dict.fromSQLRow;
  };
  exports["fromSQLRow"] = fromSQLRow;
  exports["toSQLRow"] = toSQLRow;
  exports["Row0"] = Row0;
  exports["Row1"] = Row1;
  exports["Row3"] = Row3;
  exports["toSQLRowTupleTwo"] = toSQLRowTupleTwo;
  exports["toSQLRowRow0"] = toSQLRowRow0;
  exports["fromSQLRowRow1"] = fromSQLRowRow1;
  exports["toSQLRowRow1"] = toSQLRowRow1;
  exports["toSQLRowRow3"] = toSQLRowRow3;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports.generalBracket = function (acquire) {
    return function (options) {
      return function (k) {
        return Aff.Bracket(acquire, options, k);
      };
    };
  };

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                          
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var bracket = function (acquire) {
      return function (completed) {
          return $foreign.generalBracket(acquire)({
              killed: Data_Function["const"](completed),
              failed: Data_Function["const"](completed),
              completed: Data_Function["const"](completed)
          });
      };
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);                                  
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)((function () {
              var $49 = Effect_Class.liftEffect(monadEffectAff);
              return function ($50) {
                  return $49(k($50));
              };
          })())(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["runAff"] = runAff;
  exports["bracket"] = bracket;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Database.PostgreSQL"] = $PS["Database.PostgreSQL"] || {};
  var exports = $PS["Database.PostgreSQL"];
  var $foreign = $PS["Database.PostgreSQL"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = $PS["Data.Generic.Rep.Show"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Database_PostgreSQL_Row = $PS["Database.PostgreSQL.Row"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var Effect_Class = $PS["Effect.Class"];
  var ConnectionError = (function () {
      function ConnectionError(value0) {
          this.value0 = value0;
      };
      ConnectionError.create = function (value0) {
          return new ConnectionError(value0);
      };
      return ConnectionError;
  })();
  var ConversionError = (function () {
      function ConversionError(value0) {
          this.value0 = value0;
      };
      ConversionError.create = function (value0) {
          return new ConversionError(value0);
      };
      return ConversionError;
  })();
  var InternalError = (function () {
      function InternalError(value0) {
          this.value0 = value0;
      };
      InternalError.create = function (value0) {
          return new InternalError(value0);
      };
      return InternalError;
  })();
  var OperationalError = (function () {
      function OperationalError(value0) {
          this.value0 = value0;
      };
      OperationalError.create = function (value0) {
          return new OperationalError(value0);
      };
      return OperationalError;
  })();
  var ProgrammingError = (function () {
      function ProgrammingError(value0) {
          this.value0 = value0;
      };
      ProgrammingError.create = function (value0) {
          return new ProgrammingError(value0);
      };
      return ProgrammingError;
  })();
  var IntegrityError = (function () {
      function IntegrityError(value0) {
          this.value0 = value0;
      };
      IntegrityError.create = function (value0) {
          return new IntegrityError(value0);
      };
      return IntegrityError;
  })();
  var DataError = (function () {
      function DataError(value0) {
          this.value0 = value0;
      };
      DataError.create = function (value0) {
          return new DataError(value0);
      };
      return DataError;
  })();
  var NotSupportedError = (function () {
      function NotSupportedError(value0) {
          this.value0 = value0;
      };
      NotSupportedError.create = function (value0) {
          return new NotSupportedError(value0);
      };
      return NotSupportedError;
  })();
  var QueryCanceledError = (function () {
      function QueryCanceledError(value0) {
          this.value0 = value0;
      };
      QueryCanceledError.create = function (value0) {
          return new QueryCanceledError(value0);
      };
      return QueryCanceledError;
  })();
  var TransactionRollbackError = (function () {
      function TransactionRollbackError(value0) {
          this.value0 = value0;
      };
      TransactionRollbackError.create = function (value0) {
          return new TransactionRollbackError(value0);
      };
      return TransactionRollbackError;
  })();     
  var newPool = function (cfg) {
      var cfg$prime = {
          user: Data_Nullable.toNullable(cfg.user),
          password: Data_Nullable.toNullable(cfg.password),
          host: Data_Nullable.toNullable(cfg.host),
          port: Data_Nullable.toNullable(cfg.port),
          database: cfg.database,
          max: Data_Nullable.toNullable(cfg.max),
          idleTimeoutMillis: Data_Nullable.toNullable(cfg.idleTimeoutMillis)
      };
      return $foreign.ffiNewPool(cfg$prime);
  };
  var genericPGError = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof ConnectionError) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof ConversionError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
      };
      if (x instanceof InternalError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
      };
      if (x instanceof OperationalError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
      };
      if (x instanceof ProgrammingError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
      };
      if (x instanceof IntegrityError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
      };
      if (x instanceof DataError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))));
      };
      if (x instanceof NotSupportedError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))));
      };
      if (x instanceof QueryCanceledError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))));
      };
      if (x instanceof TransactionRollbackError) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0)))))))));
      };
      throw new Error("Failed pattern match at Database.PostgreSQL (line 265, column 1 - line 265, column 52): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new ConnectionError(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new ConversionError(x.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new InternalError(x.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return new OperationalError(x.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return new ProgrammingError(x.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
          return new IntegrityError(x.value0.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
          return new DataError(x.value0.value0.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
          return new NotSupportedError(x.value0.value0.value0.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
          return new QueryCanceledError(x.value0.value0.value0.value0.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))))))) {
          return new TransactionRollbackError(x.value0.value0.value0.value0.value0.value0.value0.value0.value0);
      };
      throw new Error("Failed pattern match at Database.PostgreSQL (line 265, column 1 - line 265, column 52): " + [ x.constructor.name ]);
  });
  var showPGError = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericPGError)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "ConnectionError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "ConversionError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "column";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "constraint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "dataType";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "detail";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "file";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "hint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalPosition";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalQuery";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "line";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "routine";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "schema";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "severity";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "table";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "where_";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
      return "InternalError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "column";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "constraint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "dataType";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "detail";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "file";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "hint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalPosition";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalQuery";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "line";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "routine";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "schema";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "severity";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "table";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "where_";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
      return "OperationalError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "column";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "constraint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "dataType";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "detail";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "file";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "hint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalPosition";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalQuery";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "line";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "routine";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "schema";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "severity";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "table";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "where_";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
      return "ProgrammingError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "column";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "constraint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "dataType";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "detail";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "file";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "hint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalPosition";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalQuery";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "line";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "routine";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "schema";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "severity";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "table";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "where_";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
      return "IntegrityError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "column";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "constraint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "dataType";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "detail";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "file";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "hint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalPosition";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalQuery";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "line";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "routine";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "schema";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "severity";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "table";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "where_";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
      return "DataError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "column";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "constraint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "dataType";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "detail";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "file";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "hint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalPosition";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalQuery";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "line";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "routine";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "schema";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "severity";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "table";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "where_";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
      return "NotSupportedError";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "column";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "constraint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "dataType";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "detail";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "file";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "hint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalPosition";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalQuery";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "line";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "routine";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "schema";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "severity";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "table";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "where_";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
      return "QueryCanceledError";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "code";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "column";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "constraint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "dataType";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "detail";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "file";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "hint";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalPosition";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "internalQuery";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "line";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "routine";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "schema";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "severity";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "table";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "where_";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))(Data_Show.showString))))(new Data_Symbol.IsSymbol(function () {
      return "TransactionRollbackError";
  })))))))))))));
  var convertError = function (err) {
      var prefix = function (p) {
          var $185 = Data_Maybe.maybe(false)(function (v) {
              return v === 0;
          });
          var $186 = Data_String_CodePoints.indexOf(p);
          return function ($187) {
              return $185($186($187));
          };
      };
      var convert = function (s) {
          var $142 = prefix("0A")(s);
          if ($142) {
              return NotSupportedError.create;
          };
          var $143 = prefix("20")(s) || prefix("21")(s);
          if ($143) {
              return ProgrammingError.create;
          };
          var $144 = prefix("22")(s);
          if ($144) {
              return DataError.create;
          };
          var $145 = prefix("23")(s);
          if ($145) {
              return IntegrityError.create;
          };
          var $146 = prefix("24")(s) || prefix("25")(s);
          if ($146) {
              return InternalError.create;
          };
          var $147 = prefix("26")(s) || (prefix("27")(s) || prefix("28")(s));
          if ($147) {
              return OperationalError.create;
          };
          var $148 = prefix("2B")(s) || (prefix("2D")(s) || prefix("2F")(s));
          if ($148) {
              return InternalError.create;
          };
          var $149 = prefix("34")(s);
          if ($149) {
              return OperationalError.create;
          };
          var $150 = prefix("38")(s) || (prefix("39")(s) || prefix("3B")(s));
          if ($150) {
              return InternalError.create;
          };
          var $151 = prefix("3D")(s) || prefix("3F")(s);
          if ($151) {
              return ProgrammingError.create;
          };
          var $152 = prefix("40")(s);
          if ($152) {
              return TransactionRollbackError.create;
          };
          var $153 = prefix("42")(s) || prefix("44")(s);
          if ($153) {
              return ProgrammingError.create;
          };
          var $154 = s === "57014";
          if ($154) {
              return QueryCanceledError.create;
          };
          var $155 = prefix("5")(s);
          if ($155) {
              return OperationalError.create;
          };
          var $156 = prefix("F")(s);
          if ($156) {
              return InternalError.create;
          };
          var $157 = prefix("H")(s);
          if ($157) {
              return OperationalError.create;
          };
          var $158 = prefix("P")(s);
          if ($158) {
              return InternalError.create;
          };
          var $159 = prefix("X")(s);
          if ($159) {
              return InternalError.create;
          };
          return Data_Function["const"](new ConnectionError(s));
      };
      var v = Data_Nullable.toMaybe($foreign.ffiSQLState(err));
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_Maybe.Just.create(convert(v.value0)($foreign.ffiErrorDetail(err)));
      };
      throw new Error("Failed pattern match at Database.PostgreSQL (line 295, column 5 - line 297, column 70): " + [ v.constructor.name ]);
  };
  var unsafeQuery = function (c) {
      return function (s) {
          var p = {
              nullableLeft: (function () {
                  var $188 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Left.create);
                  return function ($189) {
                      return Data_Nullable.toNullable($188(convertError($189)));
                  };
              })(),
              right: Data_Either.Right.create
          };
          var $190 = $foreign.ffiUnsafeQuery(p)(c)(s);
          return function ($191) {
              return Effect_Aff_Compat.fromEffectFnAff($190($191));
          };
      };
  };
  var execute = function (dictToSQLRow) {
      return function (conn) {
          return function (v) {
              return function (values) {
                  return Data_Functor.map(Effect_Aff.functorAff)((function () {
                      var $192 = Data_Either.either(Data_Either.Right.create)(Data_Either.Left.create);
                      return function ($193) {
                          return Data_Either.hush($192($193));
                      };
                  })())(unsafeQuery(conn)(v)(Database_PostgreSQL_Row.toSQLRow(dictToSQLRow)(values)));
              };
          };
      };
  };
  var withTransaction = function (conn) {
      return function (action) {
          var rollback = execute(Database_PostgreSQL_Row.toSQLRowRow0)(conn)("ROLLBACK TRANSACTION")(Database_PostgreSQL_Row.Row0.value);
          var commit = execute(Database_PostgreSQL_Row.toSQLRowRow0)(conn)("COMMIT TRANSACTION")(Database_PostgreSQL_Row.Row0.value);
          var begin = execute(Database_PostgreSQL_Row.toSQLRowRow0)(conn)("BEGIN TRANSACTION")(Database_PostgreSQL_Row.Row0.value);
          return Control_Bind.bind(Effect_Aff.bindAff)(begin)(function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Error_Class.catchError(Effect_Aff.monadErrorAff)(action)(function (jsErr) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Functor["void"](Effect_Aff.functorAff)(rollback))(function () {
                          return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(jsErr);
                      });
                  }))(function (a) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(commit)(function (v1) {
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(v1.value0));
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Right(a));
                          };
                          throw new Error("Failed pattern match at Database.PostgreSQL (line 166, column 20 - line 168, column 35): " + [ v1.constructor.name ]);
                      });
                  });
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(v.value0));
              };
              throw new Error("Failed pattern match at Database.PostgreSQL (line 161, column 15 - line 169, column 41): " + [ v.constructor.name ]);
          });
      };
  };
  var query = function (dictToSQLRow) {
      return function (dictFromSQLRow) {
          return function (conn) {
              return function (v) {
                  return function (values) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(unsafeQuery(conn)(v)(Database_PostgreSQL_Row.toSQLRow(dictToSQLRow)(values)))(function (r) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Control_Bind.bind(Data_Either.bindEither)(r)((function () {
                              var $194 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)((function () {
                                  var $196 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(ConversionError.create);
                                  var $197 = Database_PostgreSQL_Row.fromSQLRow(dictFromSQLRow);
                                  return function ($198) {
                                      return $196($197($198));
                                  };
                              })());
                              return function ($195) {
                                  return $194((function (v1) {
                                      return v1.rows;
                                  })($195));
                              };
                          })()));
                      });
                  };
              };
          };
      };
  };
  var connect = (function () {
      var $201 = $foreign.ffiConnect({
          nullableLeft: (function () {
              var $203 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Left.create);
              return function ($204) {
                  return Data_Nullable.toNullable($203(convertError($204)));
              };
          })(),
          right: Data_Either.Right.create
      });
      return function ($202) {
          return Effect_Aff_Compat.fromEffectFnAff($201($202));
      };
  })();
  var withConnection = function (p) {
      return function (k) {
          var run = function (v) {
              if (v instanceof Data_Either.Left) {
                  return k(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return k(new Data_Either.Right(v.value0.connection));
              };
              throw new Error("Failed pattern match at Database.PostgreSQL (line 124, column 5 - line 124, column 34): " + [ v.constructor.name ]);
          };
          var cleanup = function (v) {
              if (v instanceof Data_Either.Left) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
              };
              if (v instanceof Data_Either.Right) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(v.value0.done);
              };
              throw new Error("Failed pattern match at Database.PostgreSQL (line 121, column 5 - line 121, column 33): " + [ v.constructor.name ]);
          };
          return Effect_Aff.bracket(connect(p))(cleanup)(run);
      };
  };
  exports["newPool"] = newPool;
  exports["withConnection"] = withConnection;
  exports["withTransaction"] = withTransaction;
  exports["execute"] = execute;
  exports["query"] = query;
  exports["showPGError"] = showPGError;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var MonadAff = function (MonadEffect0, liftAff) {
      this.MonadEffect0 = MonadEffect0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Effect_Aff.monadEffectAff;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  var monadAffExceptT = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadAff.MonadEffect0());
      }, (function () {
          var $13 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)((dictMonadAff.MonadEffect0()).Monad0());
          var $14 = liftAff(dictMonadAff);
          return function ($15) {
              return $13($14($15));
          };
      })());
  };
  exports["liftAff"] = liftAff;
  exports["monadAffAff"] = monadAffAff;
  exports["monadAffExceptT"] = monadAffExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Database.PostgreSQL.PG"] = $PS["Database.PostgreSQL.PG"] || {};
  var exports = $PS["Database.PostgreSQL.PG"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Database_PostgreSQL = $PS["Database.PostgreSQL"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];                
  var withTransaction = function (dictMonadAff) {
      return function (dictMonadError) {
          return function (f) {
              return function (conn) {
                  return function (action) {
                      return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Aff_Class.liftAff(dictMonadAff)(Database_PostgreSQL.withTransaction(conn)(f(action))))(function (res) {
                          return Data_Either.either(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0()))(Control_Bind.join(Data_Either.bindEither)(res));
                      });
                  };
              };
          };
      };
  };
  var withConnection = function (dictMonadError) {
      return function (dictMonadAff) {
          return function (f) {
              return function (p) {
                  return function (k) {
                      return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Aff_Class.liftAff(dictMonadAff)(Database_PostgreSQL.withConnection(p)(function (v) {
                          if (v instanceof Data_Either.Right) {
                              return f(k(v.value0));
                          };
                          if (v instanceof Data_Either.Left) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(v.value0));
                          };
                          throw new Error("Failed pattern match at Database.PostgreSQL.PG (line 45, column 39 - line 47, column 36): " + [ v.constructor.name ]);
                      })))(function (res) {
                          return Data_Either.either(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0()))(res);
                      });
                  };
              };
          };
      };
  };
  var hoistAffEither = function (dictMonadAff) {
      return function (dictMonadError) {
          return function (m) {
              return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Aff_Class.liftAff(dictMonadAff)(m))(Data_Either.either(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())));
          };
      };
  };
  var query = function (dictToSQLRow) {
      return function (dictFromSQLRow) {
          return function (dictMonadError) {
              return function (dictMonadAff) {
                  return function (conn) {
                      return function (sql) {
                          var $27 = hoistAffEither(dictMonadAff)(dictMonadError);
                          var $28 = Database_PostgreSQL.query(dictToSQLRow)(dictFromSQLRow)(conn)(sql);
                          return function ($29) {
                              return $27($28($29));
                          };
                      };
                  };
              };
          };
      };
  };
  var execute = function (dictToSQLRow) {
      return function (dictMonadError) {
          return function (dictMonadAff) {
              return function (conn) {
                  return function (sql) {
                      return function (values) {
                          return Control_Bind.bind(((dictMonadAff.MonadEffect0()).Monad0()).Bind1())(Effect_Aff_Class.liftAff(dictMonadAff)(Database_PostgreSQL.execute(dictToSQLRow)(conn)(sql)(values)))(function (err) {
                              return Data_Maybe.maybe(Control_Applicative.pure(((dictMonadAff.MonadEffect0()).Monad0()).Applicative0())(Data_Unit.unit))(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0()))(err);
                          });
                      };
                  };
              };
          };
      };
  };
  exports["execute"] = execute;
  exports["query"] = query;
  exports["withConnection"] = withConnection;
  exports["withTransaction"] = withTransaction;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS);
(function(exports) {
  "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Data_Show = $PS["Data.Show"];                                                
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["showError"] = showError;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.readInt = function (radix) {
    return function (n) {
      return parseInt(n, radix);
    };
  };
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["readInt"] = $foreign.readInt;
})(PS);
(function(exports) {
  /* globals exports, JSON */
  "use strict";                       
  exports.unsafeDecodeURIComponent = decodeURIComponent;
  exports.unsafeEncodeURIComponent = encodeURIComponent;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Global.Unsafe"] = $PS["Global.Unsafe"] || {};
  var exports = $PS["Global.Unsafe"];
  var $foreign = $PS["Global.Unsafe"];
  exports["unsafeDecodeURIComponent"] = $foreign.unsafeDecodeURIComponent;
  exports["unsafeEncodeURIComponent"] = $foreign.unsafeEncodeURIComponent;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["HTTPure.Headers"] = $PS["HTTPure.Headers"] || {};
  var exports = $PS["HTTPure.Headers"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CaseInsensitive = $PS["Data.String.CaseInsensitive"];
  var Headers = function (x) {
      return x;
  }; 
  var semigroup = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Headers(Data_Map_Internal.union(Data_String_CaseInsensitive.ordCaseInsensitiveString)(v1)(v));
      };
  });  
  var newtypeHeaders = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Headers);
  var header = function (key) {
      var $28 = Data_Map_Internal.singleton(key);
      return function ($29) {
          return Headers($28($29));
      };
  }; 
  var empty = Data_Map_Internal.empty;
  exports["empty"] = empty;
  exports["header"] = header;
  exports["newtypeHeaders"] = newtypeHeaders;
  exports["semigroup"] = semigroup;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Node.Buffer.Class"] = $PS["Node.Buffer.Class"] || {};
  var exports = $PS["Node.Buffer.Class"];
  var MutableBuffer = function (Monad0, concat, concat$prime, copy, create, fill, freeze, fromArray, fromArrayBuffer, fromString, getAtOffset, read, readString, setAtOffset, size, slice, thaw, toArray, toArrayBuffer, toString, unsafeFreeze, unsafeThaw, write, writeString) {
      this.Monad0 = Monad0;
      this.concat = concat;
      this["concat'"] = concat$prime;
      this.copy = copy;
      this.create = create;
      this.fill = fill;
      this.freeze = freeze;
      this.fromArray = fromArray;
      this.fromArrayBuffer = fromArrayBuffer;
      this.fromString = fromString;
      this.getAtOffset = getAtOffset;
      this.read = read;
      this.readString = readString;
      this.setAtOffset = setAtOffset;
      this.size = size;
      this.slice = slice;
      this.thaw = thaw;
      this.toArray = toArray;
      this.toArrayBuffer = toArrayBuffer;
      this.toString = toString;
      this.unsafeFreeze = unsafeFreeze;
      this.unsafeThaw = unsafeThaw;
      this.write = write;
      this.writeString = writeString;
  };
  var size = function (dict) {
      return dict.size;
  };
  var fromString = function (dict) {
      return dict.fromString;
  };
  exports["MutableBuffer"] = MutableBuffer;
  exports["fromString"] = fromString;
  exports["size"] = size;
})(PS);
(function(exports) {
  /* global exports */
  /* global Buffer */
  "use strict";

  exports.copyAll = function(a) {
    return function() {
      return Buffer.from(a);
    };
  };

  exports.writeInternal = function (ty) {
    return function (value) {
      return function (offset) {
        return function (buf) {
          return function() {
            buf['write' + ty](value, offset);
            return {};
          }
        };
      };
    };
  };

  exports.writeStringInternal = function (encoding) {
    return function (offset) {
      return function (length) {
        return function (value) {
          return function (buff) {
            return function() {
              return buff.write(value, offset, length, encoding);
            }
          };
        };
      };
    };
  };

  exports.setAtOffset = function (value) {
    return function (offset) {
      return function (buff) {
        return function() {
          buff[offset] = value;
          return {};
        };
      };
    };
  };

  exports.copy = function (srcStart) {
    return function (srcEnd) {
      return function (src) {
        return function (targStart) {
          return function (targ) {
            return function() {
              return src.copy(targ, targStart, srcStart, srcEnd);
            };
          };
        };
      };
    };
  };

  exports.fill = function (octet) {
    return function (start) {
      return function (end) {
        return function (buf) {
          return function() {
            buf.fill(octet, start, end);
            return {};
          };
        };
      };
    };
  };
})(PS["Node.Buffer.Internal"] = PS["Node.Buffer.Internal"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  /* global require */
  "use strict";

  exports.create = function (size) {
    return Buffer.alloc(size);
  };

  exports.fromArray = function (octets) {
    return Buffer.from(octets);
  };

  exports.size = function (buff) {
    return buff.length;
  };

  exports.toArray = function (buff) {
    var json = buff.toJSON()
    return json.data || json;
  };

  exports.toArrayBuffer = function(buff) {
    return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
  };

  exports.fromArrayBuffer = function(ab) {
    return Buffer.from(ab);
  };

  exports.fromStringImpl = function (str) {
    return function (encoding) {
      return Buffer.from(str, encoding);
    };
  };

  exports.readImpl = function (ty) {
    return function (offset) {
      return function (buf) {
        return buf['read' + ty](offset);
      };
    };
  };

  exports.readStringImpl = function (enc) {
    return function (start) {
      return function (end) {
        return function (buff) {
          return buff.toString(enc, start, end);
        };
      };
    };
  };

  exports.getAtOffsetImpl = function (just) {
    return function (nothing) {
      return function (offset) {
        return function (buff) {
          var octet = buff[offset];
          return octet == null ? nothing
                               : just(octet);
        };
      };
    };
  };

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return buff.toString(enc);
    };
  };

  exports.slice = function (start) {
    return function (end) {
      return function (buff) {
        return buff.slice(start, end);
      };
    };
  };

  exports.concat = function (buffs) {
    return Buffer.concat(buffs);
  };

  exports["concat'"] = function (buffs) {
    return function (totalLength) {
      return Buffer.concat(buffs, totalLength);
    };
  };
})(PS["Node.Buffer.Immutable"] = PS["Node.Buffer.Immutable"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Node.Buffer.Types"] = $PS["Node.Buffer.Types"] || {};
  var exports = $PS["Node.Buffer.Types"];
  var Data_Show = $PS["Data.Show"];                
  var UInt8 = (function () {
      function UInt8() {

      };
      UInt8.value = new UInt8();
      return UInt8;
  })();
  var UInt16LE = (function () {
      function UInt16LE() {

      };
      UInt16LE.value = new UInt16LE();
      return UInt16LE;
  })();
  var UInt16BE = (function () {
      function UInt16BE() {

      };
      UInt16BE.value = new UInt16BE();
      return UInt16BE;
  })();
  var UInt32LE = (function () {
      function UInt32LE() {

      };
      UInt32LE.value = new UInt32LE();
      return UInt32LE;
  })();
  var UInt32BE = (function () {
      function UInt32BE() {

      };
      UInt32BE.value = new UInt32BE();
      return UInt32BE;
  })();
  var Int8 = (function () {
      function Int8() {

      };
      Int8.value = new Int8();
      return Int8;
  })();
  var Int16LE = (function () {
      function Int16LE() {

      };
      Int16LE.value = new Int16LE();
      return Int16LE;
  })();
  var Int16BE = (function () {
      function Int16BE() {

      };
      Int16BE.value = new Int16BE();
      return Int16BE;
  })();
  var Int32LE = (function () {
      function Int32LE() {

      };
      Int32LE.value = new Int32LE();
      return Int32LE;
  })();
  var Int32BE = (function () {
      function Int32BE() {

      };
      Int32BE.value = new Int32BE();
      return Int32BE;
  })();
  var FloatLE = (function () {
      function FloatLE() {

      };
      FloatLE.value = new FloatLE();
      return FloatLE;
  })();
  var FloatBE = (function () {
      function FloatBE() {

      };
      FloatBE.value = new FloatBE();
      return FloatBE;
  })();
  var DoubleLE = (function () {
      function DoubleLE() {

      };
      DoubleLE.value = new DoubleLE();
      return DoubleLE;
  })();
  var DoubleBE = (function () {
      function DoubleBE() {

      };
      DoubleBE.value = new DoubleBE();
      return DoubleBE;
  })();
  var showBufferValueType = new Data_Show.Show(function (v) {
      if (v instanceof UInt8) {
          return "UInt8";
      };
      if (v instanceof UInt16LE) {
          return "UInt16LE";
      };
      if (v instanceof UInt16BE) {
          return "UInt16BE";
      };
      if (v instanceof UInt32LE) {
          return "UInt32LE";
      };
      if (v instanceof UInt32BE) {
          return "UInt32BE";
      };
      if (v instanceof Int8) {
          return "Int8";
      };
      if (v instanceof Int16LE) {
          return "Int16LE";
      };
      if (v instanceof Int16BE) {
          return "Int16BE";
      };
      if (v instanceof Int32LE) {
          return "Int32LE";
      };
      if (v instanceof Int32BE) {
          return "Int32BE";
      };
      if (v instanceof FloatLE) {
          return "FloatLE";
      };
      if (v instanceof FloatBE) {
          return "FloatBE";
      };
      if (v instanceof DoubleLE) {
          return "DoubleLE";
      };
      if (v instanceof DoubleBE) {
          return "DoubleBE";
      };
      throw new Error("Failed pattern match at Node.Buffer.Types (line 33, column 1 - line 47, column 29): " + [ v.constructor.name ]);
  });
  exports["showBufferValueType"] = showBufferValueType;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];
  var Data_Show = $PS["Data.Show"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
  });
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [ v.constructor.name ]);
  };
  exports["UTF8"] = UTF8;
  exports["encodingToNode"] = encodingToNode;
  exports["showEncoding"] = showEncoding;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Node.Buffer.Immutable"] = $PS["Node.Buffer.Immutable"] || {};
  var exports = $PS["Node.Buffer.Immutable"];
  var $foreign = $PS["Node.Buffer.Immutable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };                                                     
  var readString = function ($4) {
      return $foreign.readStringImpl(Node_Encoding.encodingToNode($4));
  };
  var read = (function () {
      var $5 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function ($6) {
          return $foreign.readImpl($5($6));
      };
  })();
  var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = function (str) {
      var $7 = $foreign.fromStringImpl(str);
      return function ($8) {
          return $7(Node_Encoding.encodingToNode($8));
      };
  };
  exports["fromString"] = fromString;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["getAtOffset"] = getAtOffset;
  exports["create"] = $foreign.create;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromArrayBuffer"] = $foreign.fromArrayBuffer;
  exports["toArray"] = $foreign.toArray;
  exports["toArrayBuffer"] = $foreign.toArrayBuffer;
  exports["concat"] = $foreign.concat;
  exports["concat'"] = $foreign["concat'"];
  exports["slice"] = $foreign.slice;
  exports["size"] = $foreign.size;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Node.Buffer.Internal"] = $PS["Node.Buffer.Internal"] || {};
  var exports = $PS["Node.Buffer.Internal"];
  var $foreign = $PS["Node.Buffer.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Immutable = $PS["Node.Buffer.Immutable"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (dictMonad) {
      return function ($20) {
          return $foreign.writeStringInternal(Node_Encoding.encodingToNode($20));
      };
  };
  var write = function (dictMonad) {
      var $21 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
      return function ($22) {
          return $foreign.writeInternal($21($22));
      };
  };
  var unsafeThaw = function (dictMonad) {
      var $23 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($24) {
          return $23($24);
      };
  };
  var usingToImmutable = function (dictMonad) {
      return function (f) {
          return function (x) {
              return unsafeThaw(dictMonad)(f(x));
          };
      };
  };
  var unsafeFreeze = function (dictMonad) {
      var $25 = Control_Applicative.pure(dictMonad.Applicative0());
      return function ($26) {
          return $25($26);
      };
  };
  var usingFromImmutable = function (dictMonad) {
      return function (f) {
          return function (buf) {
              return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(f)(unsafeFreeze(dictMonad)(buf));
          };
      };
  };
  var toString = function (dictMonad) {
      return function (m) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toString(m));
      };
  };
  var toArrayBuffer = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArrayBuffer);
  };
  var toArray = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArray);
  };
  var slice = Node_Buffer_Immutable.slice;
  var size = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.size);
  };
  var readString = function (dictMonad) {
      return function (m) {
          return function (o) {
              return function (o$prime) {
                  return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.readString(m)(o)(o$prime));
              };
          };
      };
  };
  var read = function (dictMonad) {
      return function (t) {
          return function (o) {
              return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.read(t)(o));
          };
      };
  };
  var getAtOffset = function (dictMonad) {
      return function (o) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.getAtOffset(o));
      };
  };
  var fromString = function (dictMonad) {
      return function (s) {
          return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromString(s));
      };
  };
  var fromArrayBuffer = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArrayBuffer);
  };
  var fromArray = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArray);
  };
  var create = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.create);
  };
  var concat$prime = function (dictMonad) {
      return function (arrs) {
          return function (n) {
              return function (v) {
                  return Node_Buffer_Immutable["concat'"](arrs)(n);
              };
          };
      };
  };
  var concat = function (arrs) {
      return function (v) {
          return Node_Buffer_Immutable.concat(arrs);
      };
  };
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeThaw"] = unsafeThaw;
  exports["create"] = create;
  exports["fromArray"] = fromArray;
  exports["fromString"] = fromString;
  exports["fromArrayBuffer"] = fromArrayBuffer;
  exports["toArrayBuffer"] = toArrayBuffer;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["write"] = write;
  exports["writeString"] = writeString;
  exports["toArray"] = toArray;
  exports["getAtOffset"] = getAtOffset;
  exports["slice"] = slice;
  exports["size"] = size;
  exports["concat"] = concat;
  exports["concat'"] = concat$prime;
  exports["copyAll"] = $foreign.copyAll;
  exports["setAtOffset"] = $foreign.setAtOffset;
  exports["copy"] = $foreign.copy;
  exports["fill"] = $foreign.fill;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Node.Buffer"] = $PS["Node.Buffer"] || {};
  var exports = $PS["Node.Buffer"];
  var Effect = $PS["Effect"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Buffer_Internal = $PS["Node.Buffer.Internal"];                
  var mutableBufferEffect = new Node_Buffer_Class.MutableBuffer(function () {
      return Effect.monadEffect;
  }, Node_Buffer_Internal.concat, Node_Buffer_Internal["concat'"](Effect.monadEffect), Node_Buffer_Internal.copy, Node_Buffer_Internal.create(Effect.monadEffect), Node_Buffer_Internal.fill, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.fromArray(Effect.monadEffect), Node_Buffer_Internal.fromArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.fromString(Effect.monadEffect), Node_Buffer_Internal.getAtOffset(Effect.monadEffect), Node_Buffer_Internal.read(Effect.monadEffect), Node_Buffer_Internal.readString(Effect.monadEffect), Node_Buffer_Internal.setAtOffset, Node_Buffer_Internal.size(Effect.monadEffect), Node_Buffer_Internal.slice, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.toArray(Effect.monadEffect), Node_Buffer_Internal.toArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.toString(Effect.monadEffect), Node_Buffer_Internal.unsafeFreeze(Effect.monadEffect), Node_Buffer_Internal.unsafeThaw(Effect.monadEffect), Node_Buffer_Internal.write(Effect.monadEffect), Node_Buffer_Internal.writeString(Effect.monadEffect));
  exports["mutableBufferEffect"] = mutableBufferEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Node.HTTP"] = $PS["Node.HTTP"] || {};
  var exports = $PS["Node.HTTP"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var responseAsStream = Unsafe_Coerce.unsafeCoerce;
  exports["responseAsStream"] = responseAsStream;
})(PS);
(function(exports) {
  "use strict";

  exports.write = function (w) {
    return function (chunk) {
      return function (done) {
        return function () {
          return w.write(chunk, null, done);
        };
      };
    };
  };

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };

  exports.end = function (w) {
    return function (done) {
      return function () {
        w.end(null, null, function () {
          done();
        });
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Node.Stream"] = $PS["Node.Stream"] || {};
  var exports = $PS["Node.Stream"];
  var $foreign = $PS["Node.Stream"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  exports["writeString"] = writeString;
  exports["write"] = $foreign.write;
  exports["end"] = $foreign.end;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["HTTPure.Body"] = $PS["HTTPure.Body"] || {};
  var exports = $PS["HTTPure.Body"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var HTTPure_Headers = $PS["HTTPure.Headers"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_HTTP = $PS["Node.HTTP"];
  var Node_Stream = $PS["Node.Stream"];                    
  var Body = function (defaultHeaders, write) {
      this.defaultHeaders = defaultHeaders;
      this.write = write;
  };
  var write = function (dict) {
      return dict.write;
  };
  var defaultHeaders = function (dict) {
      return dict.defaultHeaders;
  };
  var bodyBuffer = new Body(function (buf) {
      return Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(HTTPure_Headers.header("Content-Length"))(Data_Show.show(Data_Show.showInt)))(Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buf));
  }, function (body) {
      return function (response) {
          return Effect_Aff.makeAff(function (done) {
              var stream = Node_HTTP.responseAsStream(response);
              return function __do() {
                  Node_Stream.write(stream)(body)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                  Node_Stream.end(stream)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                  done(new Data_Either.Right(Data_Unit.unit))();
                  return Effect_Aff.nonCanceler;
              };
          });
      };
  });
  var bodyString = new Body(function (body) {
      return function __do() {
          var v = Node_Buffer_Class.fromString(Node_Buffer.mutableBufferEffect)(body)(Node_Encoding.UTF8.value)();
          return defaultHeaders(bodyBuffer)(v)();
      };
  }, function (body) {
      return function (response) {
          return Effect_Aff.makeAff(function (done) {
              var stream = Node_HTTP.responseAsStream(response);
              return function __do() {
                  Node_Stream.writeString(stream)(Node_Encoding.UTF8.value)(body)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                  Node_Stream.end(stream)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                  done(new Data_Either.Right(Data_Unit.unit))();
                  return Effect_Aff.nonCanceler;
              };
          });
      };
  });
  exports["defaultHeaders"] = defaultHeaders;
  exports["write"] = write;
  exports["bodyString"] = bodyString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["HTTPure.Lookup"] = $PS["HTTPure.Lookup"] || {};
  var exports = $PS["HTTPure.Lookup"];
  var Data_Function = $PS["Data.Function"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var Lookup = function (lookup) {
      this.lookup = lookup;
  };
  var lookupObject = new Lookup(Data_Function.flip(Foreign_Object.lookup));
  var lookup = function (dict) {
      return dict.lookup;
  };
  exports["lookup"] = lookup;
  exports["lookupObject"] = lookupObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["HTTPure.Method"] = $PS["HTTPure.Method"] || {};
  var exports = $PS["HTTPure.Method"];             
  var Get = (function () {
      function Get() {

      };
      Get.value = new Get();
      return Get;
  })();
  var Post = (function () {
      function Post() {

      };
      Post.value = new Post();
      return Post;
  })();
  var Options = (function () {
      function Options() {

      };
      Options.value = new Options();
      return Options;
  })();
  exports["Get"] = Get;
  exports["Post"] = Post;
  exports["Options"] = Options;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["HTTPure.Response"] = $PS["HTTPure.Response"] || {};
  var exports = $PS["HTTPure.Response"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Class = $PS["Effect.Class"];
  var HTTPure_Body = $PS["HTTPure.Body"];
  var HTTPure_Headers = $PS["HTTPure.Headers"];
  var response$prime = function (dictMonadAff) {
      return function (dictBody) {
          return function (status) {
              return function (headers) {
                  return function (body) {
                      return Effect_Class.liftEffect(dictMonadAff.MonadEffect0())(function __do() {
                          var defaultHeaders = HTTPure_Body.defaultHeaders(dictBody)(body)();
                          return {
                              status: status,
                              headers: Data_Semigroup.append(HTTPure_Headers.semigroup)(defaultHeaders)(headers),
                              writeBody: HTTPure_Body.write(dictBody)(body)
                          };
                      });
                  };
              };
          };
      };
  };
  var response = function (dictMonadAff) {
      return function (dictBody) {
          return function (status) {
              return response$prime(dictMonadAff)(dictBody)(status)(HTTPure_Headers.empty);
          };
      };
  };
  exports["response"] = response;
})(PS);
(function(exports) {
  "use strict";

  exports.process = process;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var getEnv = mkEffect(function (v) {
      return $foreign.process.env;
  });
  exports["getEnv"] = getEnv;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Text.Parsing.Parser.Pos"] = $PS["Text.Parsing.Parser.Pos"] || {};
  var exports = $PS["Text.Parsing.Parser.Pos"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Pattern = $PS["Data.String.Pattern"];
  var updatePosString = function (pos$prime) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\x0a") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x0d") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x09") {
                      return {
                          line: v.line,
                          column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
                      };
                  };
                  return {
                      line: v.line,
                      column: v.column + 1 | 0
                  };
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(""))(str));
      };
  };
  var showPosition = new Data_Show.Show(function (v) {
      return "(Position { line: " + (Data_Show.show(Data_Show.showInt)(v.line) + (", column: " + (Data_Show.show(Data_Show.showInt)(v.column) + " })")));
  });
  var initialPos = {
      line: 1,
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
  exports["showPosition"] = showPosition;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Text.Parsing.Parser"] = $PS["Text.Parsing.Parser"] || {};
  var exports = $PS["Text.Parsing.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  };
  var showParseError = new Data_Show.Show(function (v) {
      return "(ParseError " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value1) + ")")));
  });
  var newtypeParserT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserT);
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
          };
      };
  };
  var runParser = function (s) {
      var $90 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      var $91 = runParserT(Data_Identity.monadIdentity)(s);
      return function ($92) {
          return $90($91($92));
      };
  }; 
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };   
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)((function () {
          var $98 = Data_Newtype.unwrap(newtypeParserT);
          return function ($99) {
              return Control_Monad_Except_Trans.runExceptT($98(f($99)));
          };
      })());
  });                           
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (pos) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applyParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (p1) {
          return function (p2) {
              return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                      if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                          return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
                      };
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                  });
              })));
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return plusParserT(dictMonad);
      });
  };
  exports["ParseError"] = ParseError;
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["showParseError"] = showParseError;
  exports["newtypeParserT"] = newtypeParserT;
  exports["lazyParserT"] = lazyParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["altParserT"] = altParserT;
  exports["alternativeParserT"] = alternativeParserT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Text.Parsing.Parser.Combinators"] = $PS["Text.Parsing.Parser.Combinators"] || {};
  var exports = $PS["Text.Parsing.Parser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var tryRethrow = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var $$try = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };
  var optionMaybe = function (dictMonad) {
      return function (p) {
          return option(dictMonad)(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(p));
      };
  };
  exports["withErrorMessage"] = withErrorMessage;
  exports["optionMaybe"] = optionMaybe;
  exports["try"] = $$try;
  exports["tryRethrow"] = tryRethrow;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Text.Parsing.Parser.String"] = $PS["Text.Parsing.Parser.String"] || {};
  var exports = $PS["Text.Parsing.Parser.String"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Pattern = $PS["Data.String.Pattern"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var StringLike = function (drop, indexOf, $$null, uncons) {
      this.drop = drop;
      this.indexOf = indexOf;
      this["null"] = $$null;
      this.uncons = uncons;
  };
  var uncons = function (dict) {
      return dict.uncons;
  };
  var stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_CodePoints.indexOf, Data_String_Common["null"], Data_String_CodeUnits.uncons);
  var $$null = function (dict) {
      return dict["null"];
  };
  var indexOf = function (dict) {
      return dict.indexOf;
  };
  var eof = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (input) {
              return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))($$null(dictStringLike)(input))(Text_Parsing_Parser.fail(dictMonad)("Expected EOF"));
          });
      };
  };
  var drop = function (dict) {
      return dict.drop;
  };
  var string = function (dictStringLike) {
      return function (dictMonad) {
          return function (str) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                  return v.value0;
              }))(function (input) {
                  var v = indexOf(dictStringLike)(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(str))(input);
                  if (v instanceof Data_Maybe.Just && v.value0 === 0) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                          return new Text_Parsing_Parser.ParseState(drop(dictStringLike)(Data_String_CodePoints.length(str))(input), Text_Parsing_Parser_Pos.updatePosString(v1.value1)(str), true);
                      }))(function () {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                      });
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
              });
          };
      };
  };
  var anyChar = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (input) {
              var v = uncons(dictStringLike)(input);
              if (v instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                      return new Text_Parsing_Parser.ParseState(v.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(Data_String_CodeUnits.singleton(v.value0.head)), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): " + [ v.constructor.name ]);
          });
      };
  };
  var satisfy = function (dictStringLike) {
      return function (dictMonad) {
          return function (f) {
              return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (c) {
                  var $52 = f(c);
                  if ($52) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String_CodeUnits.singleton(c) + "' did not satisfy predicate"));
              }));
          };
      };
  };
  var $$char = function (dictStringLike) {
      return function (dictMonad) {
          return function (c) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function (v) {
                  return v === c;
              }))(Data_Show.show(Data_Show.showChar)(c));
          };
      };
  };
  var oneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  exports["eof"] = eof;
  exports["string"] = string;
  exports["anyChar"] = anyChar;
  exports["satisfy"] = satisfy;
  exports["char"] = $$char;
  exports["oneOf"] = oneOf;
  exports["stringLikeString"] = stringLikeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Text.Parsing.Parser.Token"] = $PS["Text.Parsing.Parser.Token"] || {};
  var exports = $PS["Text.Parsing.Parser.Token"];
  var Data_Char_Unicode = $PS["Data.Char.Unicode"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var hexDigit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isHexDigit))("hex digit");
  };
  var digit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isDigit))("digit");
  };
  exports["digit"] = digit;
  exports["hexDigit"] = hexDigit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Common"] = $PS["URI.Common"] || {};
  var exports = $PS["URI.Common"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_NonEmpty_CodeUnits = $PS["Data.String.NonEmpty.CodeUnits"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Global_Unsafe = $PS["Global.Unsafe"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];
  var wrapParser = function (dictMonad) {
      return function (parseA) {
          return function (p) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)))(Control_Monad_State_Class.get(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad))))(function (v) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)))(Data_Newtype.un(Text_Parsing_Parser.newtypeParserT)(Text_Parsing_Parser.ParserT)(p))(function (a) {
                      var v1 = parseA(a);
                      if (v1 instanceof Data_Either.Left) {
                          return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)))(new Text_Parsing_Parser.ParseError(v1.value0, v.value1));
                      };
                      if (v1 instanceof Data_Either.Right) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)))(v1.value0);
                      };
                      throw new Error("Failed pattern match at URI.Common (line 56, column 3 - line 58, column 21): " + [ v1.constructor.name ]);
                  });
              });
          };
      };
  };
  var subDelims = Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "!", "$", "&", "'", "(", ")", "*", "+", ";", "=", "," ]);
  var printEncoded = function (p) {
      return function (s) {
          var simpleChar = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.singleton)(p);
          var encodedChar = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($19) {
              return Global_Unsafe.unsafeEncodeURIComponent(Data_String_CodeUnits.singleton($19));
          })(Text_Parsing_Parser_String.anyChar(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity));
          var parse = Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_Common.joinWith(""))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(simpleChar)(encodedChar))))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity));
          return Data_Either.either(Data_Function["const"](s))(Control_Category.identity(Control_Category.categoryFn))(Text_Parsing_Parser.runParser(s)(parse));
      };
  };
  var printEncoded$prime = function (p) {
      var $20 = Data_String_NonEmpty_Internal.unsafeFromString();
      var $21 = printEncoded(p);
      return function ($22) {
          return $20($21(Data_String_NonEmpty_Internal.toString($22)));
      };
  };
  var pctEncoded = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("%"))(function (d0) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.hexDigit(Data_Identity.monadIdentity))(function (d1) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.hexDigit(Data_Identity.monadIdentity))(function (d2) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Semigroup.append(Data_String_NonEmpty_Internal.semigroupNonEmptyString)(Data_String_NonEmpty_CodeUnits.singleton(d0))(Data_Semigroup.append(Data_String_NonEmpty_Internal.semigroupNonEmptyString)(Data_String_NonEmpty_CodeUnits.singleton(d1))(Data_String_NonEmpty_CodeUnits.singleton(d2))));
          });
      });
  });                                        
  var decodeURIComponent$prime = (function () {
      var $23 = Data_String_NonEmpty_Internal.unsafeFromString();
      return function ($24) {
          return $23(Global_Unsafe.unsafeDecodeURIComponent(Data_String_NonEmpty_Internal.toString($24)));
      };
  })();
  var alpha = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(function (c) {
      return c >= "a" && c <= "z" || c >= "A" && c <= "Z";
  });
  var alphaNum = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(alpha)(Text_Parsing_Parser_Token.digit(Data_Identity.monadIdentity));
  var unreserved = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(alphaNum)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("-")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(".")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("_")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("~"));
  exports["wrapParser"] = wrapParser;
  exports["alpha"] = alpha;
  exports["alphaNum"] = alphaNum;
  exports["unreserved"] = unreserved;
  exports["pctEncoded"] = pctEncoded;
  exports["subDelims"] = subDelims;
  exports["printEncoded'"] = printEncoded$prime;
  exports["decodeURIComponent'"] = decodeURIComponent$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.UserInfo"] = $PS["URI.UserInfo"] || {};
  var exports = $PS["URI.UserInfo"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_String_NonEmpty_CodeUnits = $PS["Data.String.NonEmpty.CodeUnits"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var URI_Common = $PS["URI.Common"];                
  var UserInfo = function (x) {
      return x;
  };
  var userInfoChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(URI_Common.subDelims))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"));
  var unsafeToString = function (v) {
      return v;
  };
  var unsafeFromString = UserInfo;
  var parser = (function () {
      var parse = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(userInfoChar))(URI_Common.pctEncoded);
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
          var $7 = Data_String_NonEmpty_Internal.join1With(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)("");
          return function ($8) {
              return UserInfo($7($8));
          };
      })())(Data_Array_NonEmpty.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(parse));
  })();
  exports["unsafeFromString"] = unsafeFromString;
  exports["unsafeToString"] = unsafeToString;
  exports["parser"] = parser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Authority"] = $PS["URI.Authority"] || {};
  var exports = $PS["URI.Authority"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var URI_Common = $PS["URI.Common"];
  var URI_UserInfo = $PS["URI.UserInfo"];                
  var Authority = (function () {
      function Authority(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Authority.create = function (value0) {
          return function (value1) {
              return new Authority(value0, value1);
          };
      };
      return Authority;
  })();
  var parser = function (opts) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("//"))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(URI_Common.wrapParser(Data_Identity.monadIdentity)(opts.parseUserInfo)(URI_UserInfo.parser))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("@")))))(function (ui) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(opts.parseHosts)(function (hosts) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Authority(ui, hosts));
              });
          });
      });
  };
  var _userInfo = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value0;
      })(function (v) {
          return function (ui) {
              return new Authority(ui, v.value1);
          };
      })(dictStrong);
  };
  var _hosts = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (hs) {
              return new Authority(v.value0, hs);
          };
      })(dictStrong);
  };
  exports["parser"] = parser;
  exports["_userInfo"] = _userInfo;
  exports["_hosts"] = _hosts;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Path.Segment"] = $PS["URI.Path.Segment"] || {};
  var exports = $PS["URI.Path.Segment"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_String_NonEmpty_CodeUnits = $PS["Data.String.NonEmpty.CodeUnits"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Global_Unsafe = $PS["Global.Unsafe"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var URI_Common = $PS["URI.Common"];
  var PathSegmentNZ = function (x) {
      return x;
  };
  var PathSegment = function (x) {
      return x;
  }; 
  var segmentToString = function (v) {
      return Global_Unsafe.unsafeDecodeURIComponent(v);
  };
  var segmentNCChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(URI_Common.subDelims))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("@"));
  var segmentChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(segmentNCChar)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"));                                                                                                                                                        
  var parseSegmentNZ = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
      var $28 = Data_String_NonEmpty_Internal.join1With(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)("");
      return function ($29) {
          return PathSegmentNZ($28($29));
      };
  })())(Data_Array_NonEmpty.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.pctEncoded)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(segmentChar))));
  var parseSegment = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
      var $30 = Data_String_NonEmpty_Internal.joinWith(Data_Foldable.foldableArray)("");
      return function ($31) {
          return PathSegment($30($31));
      };
  })())(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.pctEncoded)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(segmentChar))));
  exports["segmentToString"] = segmentToString;
  exports["parseSegment"] = parseSegment;
  exports["parseSegmentNZ"] = parseSegmentNZ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Path"] = $PS["URI.Path"] || {};
  var exports = $PS["URI.Path"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var URI_Path_Segment = $PS["URI.Path.Segment"];                
  var Path = function (x) {
      return x;
  };
  var parser = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Path)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/"))(URI_Path_Segment.parseSegment)));
  exports["parser"] = parser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Path.Absolute"] = $PS["URI.Path.Absolute"] || {};
  var exports = $PS["URI.Path.Absolute"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var URI_Path_Segment = $PS["URI.Path.Segment"];                
  var PathAbsolute = function (x) {
      return x;
  };
  var parse = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/"))(function () {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(URI_Path_Segment.parseSegmentNZ))(function (v) {
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
                  var $27 = Data_Tuple.Tuple.create(v.value0);
                  return function ($28) {
                      return PathAbsolute(Data_Maybe.Just.create($27($28)));
                  };
              })())(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/"))(URI_Path_Segment.parseSegment)));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
          };
          throw new Error("Failed pattern match at URI.Path.Absolute (line 37, column 34 - line 41, column 34): " + [ v.constructor.name ]);
      });
  });
  exports["parse"] = parse;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Path.Rootless"] = $PS["URI.Path.Rootless"] || {};
  var exports = $PS["URI.Path.Rootless"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var URI_Path_Segment = $PS["URI.Path.Segment"];
  var parse = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(URI_Path_Segment.parseSegmentNZ)(function (head) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/"))(URI_Path_Segment.parseSegment)))(function (tail) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(head, tail));
      });
  });
  exports["parse"] = parse;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.HierarchicalPart"] = $PS["URI.HierarchicalPart"] || {};
  var exports = $PS["URI.HierarchicalPart"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Internal_Wander = $PS["Data.Lens.Internal.Wander"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var URI_Authority = $PS["URI.Authority"];
  var URI_Common = $PS["URI.Common"];
  var URI_Path = $PS["URI.Path"];
  var URI_Path_Absolute = $PS["URI.Path.Absolute"];
  var URI_Path_Rootless = $PS["URI.Path.Rootless"];                
  var HierarchicalPartAuth = (function () {
      function HierarchicalPartAuth(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      HierarchicalPartAuth.create = function (value0) {
          return function (value1) {
              return new HierarchicalPartAuth(value0, value1);
          };
      };
      return HierarchicalPartAuth;
  })();
  var HierarchicalPartNoAuth = (function () {
      function HierarchicalPartNoAuth(value0) {
          this.value0 = value0;
      };
      HierarchicalPartNoAuth.create = function (value0) {
          return new HierarchicalPartNoAuth(value0);
      };
      return HierarchicalPartNoAuth;
  })();
  var parser = function (opts) {
      var withAuth = Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(HierarchicalPartAuth.create)(URI_Authority.parser(opts)))(URI_Common.wrapParser(Data_Identity.monadIdentity)(opts.parsePath)(URI_Path.parser));
      var noAuthPath = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(URI_Common.wrapParser(Data_Identity.monadIdentity)(function ($88) {
          return opts.parseHierPath(Data_Either.Left.create($88));
      })(URI_Path_Absolute.parse)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(URI_Common.wrapParser(Data_Identity.monadIdentity)(function ($89) {
          return opts.parseHierPath(Data_Either.Right.create($89));
      })(URI_Path_Rootless.parse))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value));
      var withoutAuth = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(HierarchicalPartNoAuth.create)(noAuthPath);
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(withAuth)(withoutAuth);
  };
  var _path = function (dictWander) {
      return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
          return function (f) {
              return function (v) {
                  if (v instanceof HierarchicalPartAuth) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(HierarchicalPartAuth.create(v.value0))(f(v.value1));
                  };
                  return Control_Applicative.pure(dictApplicative)(v);
              };
          };
      });
  };
  var _authority = function (dictWander) {
      return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
          return function (f) {
              return function (v) {
                  if (v instanceof HierarchicalPartAuth) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(HierarchicalPartAuth.create)(v.value1))(f(v.value0));
                  };
                  return Control_Applicative.pure(dictApplicative)(v);
              };
          };
      });
  };
  exports["parser"] = parser;
  exports["_authority"] = _authority;
  exports["_path"] = _path;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Query"] = $PS["URI.Query"] || {};
  var exports = $PS["URI.Query"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_String_NonEmpty_CodeUnits = $PS["Data.String.NonEmpty.CodeUnits"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var URI_Common = $PS["URI.Common"];                
  var Query = function (x) {
      return x;
  };                                                  
  var queryChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(URI_Common.subDelims))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("@")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("/")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("?"));
  var parser = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("?"))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
      var $8 = Data_String_NonEmpty_Internal.joinWith(Data_Foldable.foldableArray)("");
      return function ($9) {
          return Query($8($9));
      };
  })())(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(queryChar))(URI_Common.pctEncoded))));
  exports["parser"] = parser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Scheme"] = $PS["URI.Scheme"] || {};
  var exports = $PS["URI.Scheme"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_NonEmpty_CodeUnits = $PS["Data.String.NonEmpty.CodeUnits"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var URI_Common = $PS["URI.Common"];                
  var Scheme = function (x) {
      return x;
  };
  var parseScheme = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(URI_Common.alpha)(function (init) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.alphaNum)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("+")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("-")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."))))(function (rest) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_String_NonEmpty_Internal.appendString(Data_String_NonEmpty_CodeUnits.singleton(init))(Data_String_CodeUnits.fromCharArray(rest)));
      });
  });
  var parser = Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Scheme)(parseScheme))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"));
  exports["parser"] = parser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.AbsoluteURI"] = $PS["URI.AbsoluteURI"] || {};
  var exports = $PS["URI.AbsoluteURI"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var URI_Common = $PS["URI.Common"];
  var URI_HierarchicalPart = $PS["URI.HierarchicalPart"];
  var URI_Query = $PS["URI.Query"];
  var URI_Scheme = $PS["URI.Scheme"];                
  var AbsoluteURI = (function () {
      function AbsoluteURI(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      AbsoluteURI.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new AbsoluteURI(value0, value1, value2);
              };
          };
      };
      return AbsoluteURI;
  })();
  var parser = function (opts) {
      return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(AbsoluteURI.create)(URI_Scheme.parser))(URI_HierarchicalPart.parser(opts)))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(URI_Common.wrapParser(Data_Identity.monadIdentity)(opts.parseQuery)(URI_Query.parser))))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity));
  };
  var _hierPart = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.value1;
      })(function (v) {
          return function (h) {
              return new AbsoluteURI(v.value0, h, v.value2);
          };
      })(dictStrong);
  };
  exports["parser"] = parser;
  exports["_hierPart"] = _hierPart;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Extra.UserPassInfo"] = $PS["URI.Extra.UserPassInfo"] || {};
  var exports = $PS["URI.Extra.UserPassInfo"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_NonEmpty_CodeUnits = $PS["Data.String.NonEmpty.CodeUnits"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var URI_Common = $PS["URI.Common"];
  var URI_UserInfo = $PS["URI.UserInfo"];                
  var UserPassInfo = function (x) {
      return x;
  };
  var userPassInfoChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(URI_Common.subDelims);
  var print = function (v) {
      if (v.password instanceof Data_Maybe.Nothing) {
          return URI_UserInfo.unsafeFromString(URI_Common["printEncoded'"](userPassInfoChar)(v.user));
      };
      if (v.password instanceof Data_Maybe.Just) {
          return URI_UserInfo.unsafeFromString(Data_Semigroup.append(Data_String_NonEmpty_Internal.semigroupNonEmptyString)(URI_Common["printEncoded'"](userPassInfoChar)(v.user))(Data_Semigroup.append(Data_String_NonEmpty_Internal.semigroupNonEmptyString)(Data_String_NonEmpty_CodeUnits.singleton(":"))(URI_Common["printEncoded'"](userPassInfoChar)(v.password.value0))));
      };
      throw new Error("Failed pattern match at URI.Extra.UserPassInfo (line 68, column 3 - line 75, column 44): " + [ v.password.constructor.name ]);
  };
  var parse = function (ui) {
      var s = URI_UserInfo.unsafeToString(ui);
      var v = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_String_NonEmpty_CodeUnits.splitAt)(s))(Data_String_NonEmpty_CodeUnits.indexOf(":")(s));
      if (v instanceof Data_Maybe.Just && v.value0.before instanceof Data_Maybe.Nothing) {
          return new Data_Either.Left("Expected a username before a password segment");
      };
      if (v instanceof Data_Maybe.Just && (v.value0.before instanceof Data_Maybe.Just && v.value0.after instanceof Data_Maybe.Just)) {
          return Data_Either.Right.create({
              user: URI_Common["decodeURIComponent'"](v.value0.before.value0),
              password: Data_Functor.map(Data_Maybe.functorMaybe)(URI_Common["decodeURIComponent'"])(Data_String_NonEmpty_CodeUnits.drop(1)(v.value0.after.value0))
          });
      };
      return Data_Either.Right.create({
          user: URI_Common["decodeURIComponent'"](s),
          password: Data_Maybe.Nothing.value
      });
  };
  var newtypeUserPassInfo = new Data_Newtype.Newtype(function (n) {
      return n;
  }, UserPassInfo);
  exports["parse"] = parse;
  exports["print"] = print;
  exports["newtypeUserPassInfo"] = newtypeUserPassInfo;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Host.IPv4Address"] = $PS["URI.Host.IPv4Address"] || {};
  var exports = $PS["URI.Host.IPv4Address"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];
  var URI_Common = $PS["URI.Common"];                
  var IPv4Address = (function () {
      function IPv4Address(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      IPv4Address.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new IPv4Address(value0, value1, value2, value3);
                  };
              };
          };
      };
      return IPv4Address;
  })();
  var toInt = function (s) {
      var v = Data_Int.fromString(s);
      if (v instanceof Data_Maybe.Just && (v.value0 >= 0 && v.value0 <= 255)) {
          return new Data_Either.Right(v.value0);
      };
      return new Data_Either.Left("Invalid IPv4 address octet");
  }; 
  var print = function (v) {
      return Data_Show.show(Data_Show.showInt)(v.value0) + ("." + (Data_Show.show(Data_Show.showInt)(v.value1) + ("." + (Data_Show.show(Data_Show.showInt)(v.value2) + ("." + Data_Show.show(Data_Show.showInt)(v.value3))))));
  };
  var nzDigit = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(function (c) {
      return c >= "1" && c <= "9";
  });
  var octet = URI_Common.wrapParser(Data_Identity.monadIdentity)(toInt)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (x) {
      return function (y) {
          return function (z) {
              return Data_String_CodeUnits.fromCharArray([ x, y, z ]);
          };
      };
  })(nzDigit))(Text_Parsing_Parser_Token.digit(Data_Identity.monadIdentity)))(Text_Parsing_Parser_Token.digit(Data_Identity.monadIdentity))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function (x) {
      return function (y) {
          return Data_String_CodeUnits.fromCharArray([ x, y ]);
      };
  })(nzDigit))(Text_Parsing_Parser_Token.digit(Data_Identity.monadIdentity)))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.singleton)(Text_Parsing_Parser_Token.digit(Data_Identity.monadIdentity))));
  var parser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(octet)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(".")))(function (o1) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(octet)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(".")))(function (o2) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(octet)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(".")))(function (o3) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(octet)(function (o4) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new IPv4Address(o1, o2, o3, o4));
              });
          });
      });
  });
  exports["parser"] = parser;
  exports["print"] = print;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Host.IPv6Address"] = $PS["URI.Host.IPv6Address"] || {};
  var exports = $PS["URI.Host.IPv6Address"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];                
  var IPv6Address = function (x) {
      return x;
  };
  var unsafeToString = function (v) {
      return "[" + (v + "]");
  }; 
  var parser = (function () {
      var ipv6Char = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.hexDigit(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("."));
      return Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(IPv6Address)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("["))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(ipv6Char))))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("]"))))("IPv6 address");
  })();
  exports["unsafeToString"] = unsafeToString;
  exports["parser"] = parser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Host.RegName"] = $PS["URI.Host.RegName"] || {};
  var exports = $PS["URI.Host.RegName"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_String_NonEmpty_CodeUnits = $PS["Data.String.NonEmpty.CodeUnits"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var URI_Common = $PS["URI.Common"];                
  var RegName = function (x) {
      return x;
  };
  var unsafeToString = function (v) {
      return v;
  };                             
  var toString = function (v) {
      return URI_Common["decodeURIComponent'"](v);
  };                                                                           
  var regNameChar = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.unreserved)(URI_Common.subDelims);
  var print = function ($6) {
      return Data_String_NonEmpty_Internal.toString(unsafeToString($6));
  };
  var parser = (function () {
      var p = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(URI_Common.pctEncoded)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_NonEmpty_CodeUnits.singleton)(regNameChar));
      return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
          var $7 = Data_String_NonEmpty_Internal.join1With(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray)("");
          return function ($8) {
              return RegName($7($8));
          };
      })())(Data_Array_NonEmpty.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(p));
  })();
  exports["parser"] = parser;
  exports["print"] = print;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Host"] = $PS["URI.Host"] || {};
  var exports = $PS["URI.Host"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var URI_Host_IPv4Address = $PS["URI.Host.IPv4Address"];
  var URI_Host_IPv6Address = $PS["URI.Host.IPv6Address"];
  var URI_Host_RegName = $PS["URI.Host.RegName"];                
  var IPv6Address = (function () {
      function IPv6Address(value0) {
          this.value0 = value0;
      };
      IPv6Address.create = function (value0) {
          return new IPv6Address(value0);
      };
      return IPv6Address;
  })();
  var IPv4Address = (function () {
      function IPv4Address(value0) {
          this.value0 = value0;
      };
      IPv4Address.create = function (value0) {
          return new IPv4Address(value0);
      };
      return IPv4Address;
  })();
  var NameAddress = (function () {
      function NameAddress(value0) {
          this.value0 = value0;
      };
      NameAddress.create = function (value0) {
          return new NameAddress(value0);
      };
      return NameAddress;
  })();
  var print = function (v) {
      if (v instanceof IPv6Address) {
          return URI_Host_IPv6Address.unsafeToString(v.value0);
      };
      if (v instanceof IPv4Address) {
          return URI_Host_IPv4Address.print(v.value0);
      };
      if (v instanceof NameAddress) {
          return URI_Host_RegName.print(v.value0);
      };
      throw new Error("Failed pattern match at URI.Host (line 49, column 9 - line 52, column 40): " + [ v.constructor.name ]);
  };
  var parser = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(IPv6Address.create)(URI_Host_IPv6Address.parser))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(IPv4Address.create)(URI_Host_IPv4Address.parser))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(NameAddress.create)(URI_Host_RegName.parser));
  exports["parser"] = parser;
  exports["print"] = print;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.Port"] = $PS["URI.Port"] || {};
  var exports = $PS["URI.Port"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Global = $PS["Global"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];
  var toInt = function (v) {
      return v;
  }; 
  var print = function (v) {
      return ":" + Data_Show.show(Data_Show.showInt)(v);
  };
  var parser = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_String_CodeUnits.fromCharArray)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(":"))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Token.digit(Data_Identity.monadIdentity)))))(function (s) {
      var v = Data_Int.fromNumber(Global.readInt(10)(s));
      if (v instanceof Data_Maybe.Just) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v.value0);
      };
      return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected a valid port number");
  });
  exports["toInt"] = toInt;
  exports["parser"] = parser;
  exports["print"] = print;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["URI.HostPortPair"] = $PS["URI.HostPortPair"] || {};
  var exports = $PS["URI.HostPortPair"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_These = $PS["Data.These"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var URI_Common = $PS["URI.Common"];
  var URI_Host = $PS["URI.Host"];
  var URI_Port = $PS["URI.Port"];                
  var print = function (printHost) {
      return function (printPort) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return "";
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_These.This) {
                  return URI_Host.print(printHost(v.value0.value0));
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_These.That) {
                  return URI_Port.print(printPort(v.value0.value0));
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_These.Both) {
                  return URI_Host.print(printHost(v.value0.value0)) + URI_Port.print(printPort(v.value0.value1));
              };
              throw new Error("Failed pattern match at URI.HostPortPair (line 58, column 29 - line 66, column 63): " + [ v.constructor.name ]);
          };
      };
  };
  var parser = function (parseHost) {
      return function (parsePort) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(URI_Common.wrapParser(Data_Identity.monadIdentity)(parseHost)(URI_Host.parser)))(function (mh) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(URI_Common.wrapParser(Data_Identity.monadIdentity)(parsePort)(URI_Port.parser)))(function (mp) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))((function () {
                      if (mh instanceof Data_Maybe.Just && mp instanceof Data_Maybe.Nothing) {
                          return new Data_Maybe.Just(new Data_These.This(mh.value0));
                      };
                      if (mh instanceof Data_Maybe.Nothing && mp instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just(new Data_These.That(mp.value0));
                      };
                      if (mh instanceof Data_Maybe.Just && mp instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just(new Data_These.Both(mh.value0, mp.value0));
                      };
                      if (mh instanceof Data_Maybe.Nothing && mp instanceof Data_Maybe.Nothing) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at URI.HostPortPair (line 41, column 8 - line 45, column 31): " + [ mh.constructor.name, mp.constructor.name ]);
                  })());
              });
          });
      };
  };
  exports["parser"] = parser;
  exports["print"] = print;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Server.DBConnection"] = $PS["Server.DBConnection"] || {};
  var exports = $PS["Server.DBConnection"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Fold = $PS["Data.Lens.Fold"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_Last = $PS["Data.Maybe.Last"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_NonEmpty_Internal = $PS["Data.String.NonEmpty.Internal"];
  var Data_These = $PS["Data.These"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var URI_AbsoluteURI = $PS["URI.AbsoluteURI"];
  var URI_Authority = $PS["URI.Authority"];
  var URI_Extra_UserPassInfo = $PS["URI.Extra.UserPassInfo"];
  var URI_HierarchicalPart = $PS["URI.HierarchicalPart"];
  var URI_Host = $PS["URI.Host"];
  var URI_HostPortPair = $PS["URI.HostPortPair"];
  var URI_Path_Segment = $PS["URI.Path.Segment"];
  var URI_Port = $PS["URI.Port"];                
  var user = function (uri) {
      var userInfo = Control_Bind.join(Data_Maybe.bindMaybe)(Data_Lens_Fold.lastOf((function () {
          var $10 = URI_AbsoluteURI["_hierPart"](Data_Lens_Internal_Forget.strongForget);
          var $11 = URI_HierarchicalPart["_authority"](Data_Lens_Internal_Forget.wanderForget(Data_Maybe_Last.monoidLast));
          var $12 = URI_Authority["_userInfo"](Data_Lens_Internal_Forget.strongForget);
          return function ($13) {
              return $10($11($12($13)));
          };
      })())(uri));
      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Functor.functorFn)(Data_String_NonEmpty_Internal.toString)(function (v) {
          return v.user;
      }))(Data_Newtype.unwrap(URI_Extra_UserPassInfo.newtypeUserPassInfo)))(userInfo);
  };
  var showError = function (dictShow) {
      return function (v) {
          if (v instanceof Data_Either.Left) {
              return Data_Either.Left.create(Data_Show.show(dictShow)(v.value0));
          };
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(v.value0);
          };
          throw new Error("Failed pattern match at Server.DBConnection (line 47, column 1 - line 47, column 73): " + [ v.constructor.name ]);
      };
  };
  var port = function (uri) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Lens_Fold.lastOf((function () {
          var $14 = URI_AbsoluteURI["_hierPart"](Data_Lens_Internal_Forget.strongForget);
          var $15 = URI_HierarchicalPart["_authority"](Data_Lens_Internal_Forget.wanderForget(Data_Maybe_Last.monoidLast));
          var $16 = URI_Authority["_hosts"](Data_Lens_Internal_Forget.strongForget);
          return function ($17) {
              return $14($15($16($17)));
          };
      })())(uri)))(function (hostPortPair) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_These.theseRight(hostPortPair))(function (port$prime) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(URI_Port.toInt(port$prime));
          });
      });
  };
  var pathHead = function (v) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(URI_Path_Segment.segmentToString)(Data_Array.head(v));
  };
  var password = function (uri) {
      var userInfoM = Control_Bind.join(Data_Maybe.bindMaybe)(Data_Lens_Fold.lastOf((function () {
          var $18 = URI_AbsoluteURI["_hierPart"](Data_Lens_Internal_Forget.strongForget);
          var $19 = URI_HierarchicalPart["_authority"](Data_Lens_Internal_Forget.wanderForget(Data_Maybe_Last.monoidLast));
          var $20 = URI_Authority["_userInfo"](Data_Lens_Internal_Forget.strongForget);
          return function ($21) {
              return $18($19($20($21)));
          };
      })())(uri));
      return Control_Bind.bind(Data_Maybe.bindMaybe)(userInfoM)(function (userInfo) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)((Data_Newtype.unwrap(URI_Extra_UserPassInfo.newtypeUserPassInfo)(userInfo)).password)(function (password$prime) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_String_NonEmpty_Internal.toString(password$prime));
          });
      });
  };
  var options = {
      parseUserInfo: URI_Extra_UserPassInfo.parse,
      printUserInfo: URI_Extra_UserPassInfo.print,
      parseHosts: URI_HostPortPair.parser(Control_Applicative.pure(Data_Either.applicativeEither))(Control_Applicative.pure(Data_Either.applicativeEither)),
      printHosts: URI_HostPortPair.print(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)),
      parsePath: Control_Applicative.pure(Data_Either.applicativeEither),
      printPath: Control_Category.identity(Control_Category.categoryFn),
      parseHierPath: Control_Applicative.pure(Data_Either.applicativeEither),
      printHierPath: Control_Category.identity(Control_Category.categoryFn),
      parseQuery: Control_Applicative.pure(Data_Either.applicativeEither),
      printQuery: Control_Category.identity(Control_Category.categoryFn)
  };
  var host = function (uri) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Lens_Fold.lastOf((function () {
          var $22 = URI_AbsoluteURI["_hierPart"](Data_Lens_Internal_Forget.strongForget);
          var $23 = URI_HierarchicalPart["_authority"](Data_Lens_Internal_Forget.wanderForget(Data_Maybe_Last.monoidLast));
          var $24 = URI_Authority["_hosts"](Data_Lens_Internal_Forget.strongForget);
          return function ($25) {
              return $22($23($24($25)));
          };
      })())(uri)))(function (hostPortPair) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_These.theseLeft(hostPortPair))(function (h) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(URI_Host.print(h));
          });
      });
  };
  var database = function (uri) {
      var databaseM = Control_Bind.join(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(pathHead)(Data_Lens_Fold.lastOf((function () {
          var $26 = URI_AbsoluteURI["_hierPart"](Data_Lens_Internal_Forget.strongForget);
          var $27 = URI_HierarchicalPart["_path"](Data_Lens_Internal_Forget.wanderForget(Data_Maybe_Last.monoidLast));
          return function ($28) {
              return $26($27($28));
          };
      })())(uri)));
      if (databaseM instanceof Data_Maybe.Just) {
          return new Data_Either.Right(databaseM.value0);
      };
      if (databaseM instanceof Data_Maybe.Nothing) {
          return new Data_Either.Left("URI doesn't have database specified");
      };
      throw new Error("Failed pattern match at Server.DBConnection (line 67, column 16 - line 69, column 56): " + [ databaseM.constructor.name ]);
  };
  var uriToConfig = function (uri) {
      return Control_Bind.bind(Data_Either.bindEither)(database(uri))(function (database$prime) {
          return Control_Applicative.pure(Data_Either.applicativeEither)({
              database: database$prime,
              host: host(uri),
              idleTimeoutMillis: Data_Maybe.Nothing.value,
              max: Data_Maybe.Nothing.value,
              password: password(uri),
              user: user(uri),
              port: port(uri)
          });
      });
  };
  var fromURI = function (s) {
      return showError(Data_Show.showString)((function () {
          var p = URI_AbsoluteURI.parser(options);
          return Control_Bind.bind(Data_Either.bindEither)(showError(Text_Parsing_Parser.showParseError)(Text_Parsing_Parser.runParser(s)(p)))(function (uri) {
              return uriToConfig(uri);
          });
      })());
  };
  exports["fromURI"] = fromURI;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Server.DB"] = $PS["Server.DB"] || {};
  var exports = $PS["Server.DB"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Database_PostgreSQL = $PS["Database.PostgreSQL"];
  var Database_PostgreSQL_PG = $PS["Database.PostgreSQL.PG"];
  var Database_PostgreSQL_Row = $PS["Database.PostgreSQL.Row"];
  var Database_PostgreSQL_Value = $PS["Database.PostgreSQL.Value"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Server_DBConnection = $PS["Server.DBConnection"];                
  var withTransaction = Database_PostgreSQL_PG.withTransaction(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff))(Control_Monad_Except_Trans.runExceptT);
  var withConnection = Database_PostgreSQL_PG.withConnection(Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff))(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(Control_Monad_Except_Trans.runExceptT);
  var showDBError = function (v) {
      if (v instanceof Data_Either.Left) {
          return new Data_Either.Left(Data_Show.show(Database_PostgreSQL.showPGError)(v.value0));
      };
      if (v instanceof Data_Either.Right) {
          return new Data_Either.Right(v.value0);
      };
      throw new Error("Failed pattern match at Server.DB (line 73, column 1 - line 73, column 64): " + [ v.constructor.name ]);
  };
  var runQuery = function (pool) {
      return function (query) {
          return Control_Monad_Except_Trans.runExceptT(withConnection(pool)(function (conn) {
              return withTransaction(conn)(query(conn));
          }));
      };
  };
  var syncAll = function (app) {
      return function (events) {
          return function (pool) {
              return runQuery(pool)(function (conn) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Database_PostgreSQL_PG.execute(Database_PostgreSQL_Row.toSQLRowRow1(Database_PostgreSQL_Value.toSQLValueString))(Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff))(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(conn)("\x0a    DELETE FROM events\x0a    WHERE app = ($1);\x0a  ")(new Database_PostgreSQL_Row.Row1(app)))(function () {
                      return Data_Functor["void"](Control_Monad_Except_Trans.functorExceptT(Effect_Aff.functorAff))(Data_Traversable["for"](Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(Data_Traversable.traversableArray)(events)(function (event) {
                          return Database_PostgreSQL_PG.execute(Database_PostgreSQL_Row.toSQLRowTupleTwo(Database_PostgreSQL_Value.toSQLValueString)(Database_PostgreSQL_Value.toSQLValueJson))(Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff))(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(conn)("\x0a      INSERT INTO events (app, event)\x0a      VALUES ($1, $2);\x0a    ")(new Data_Tuple.Tuple(app, event));
                      }));
                  });
              });
          };
      };
  };
  var retrieveEvents = function (app) {
      return function (pool) {
          return runQuery(pool)(function (conn) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Database_PostgreSQL_PG.query(Database_PostgreSQL_Row.toSQLRowRow1(Database_PostgreSQL_Value.toSQLValueString))(Database_PostgreSQL_Row.fromSQLRowRow1(Database_PostgreSQL_Value.fromSQLValueJson))(Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff))(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(conn)("\x0a    SELECT event FROM events\x0a    WHERE app = ($1)\x0a    ORDER BY id desc;\x0a    ")(new Database_PostgreSQL_Row.Row1(app)))(function (rows) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                      return v.value0;
                  })(rows));
              });
          });
      };
  };
  var createConnectionPool = function (poolConfig) {
      return Database_PostgreSQL.newPool({
          database: poolConfig.database,
          host: poolConfig.host,
          idleTimeoutMillis: new Data_Maybe.Just(1000),
          max: poolConfig.max,
          password: poolConfig.password,
          port: poolConfig.port,
          user: poolConfig.user
      });
  };
  var connectionMsg = function (poolConfig) {
      var port = Data_Maybe.fromMaybe("")(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Show.show(Data_Show.showInt))(poolConfig.port));
      var host = Data_Maybe.fromMaybe("")(poolConfig.host);
      var hostAndPort = host + (":" + port);
      return "Connected to database: " + Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "database";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "host";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "idleTimeoutMillis";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "max";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "password";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "port";
      }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "user";
      }))(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(Data_Show.showString)))(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Maybe.showMaybe(Data_Show.showString)))(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Maybe.showMaybe(Data_Show.showInt)))(Data_Maybe.showMaybe(Data_Show.showString)))(Data_Show.showString)))(poolConfig);
  };
  var getDB = function (dbUri) {
      var v = Server_DBConnection.fromURI(dbUri);
      if (v instanceof Data_Either.Left) {
          return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Left(v.value0));
      };
      if (v instanceof Data_Either.Right) {
          return function __do() {
              var pool = createConnectionPool(v.value0)();
              Effect_Console.log(connectionMsg(v.value0))();
              return new Data_Either.Right(pool);
          };
      };
      throw new Error("Failed pattern match at Server.DB (line 78, column 15 - line 83, column 22): " + [ v.constructor.name ]);
  };
  var addEvent = function (app) {
      return function (event) {
          return function (pool) {
              return runQuery(pool)(function (conn) {
                  return Database_PostgreSQL_PG.execute(Database_PostgreSQL_Row.toSQLRowTupleTwo(Database_PostgreSQL_Value.toSQLValueString)(Database_PostgreSQL_Value.toSQLValueJson))(Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff))(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(conn)("\x0a    INSERT INTO events (app, event)\x0a    VALUES ($1, $2);\x0a  ")(new Data_Tuple.Tuple(app, event));
              });
          };
      };
  };
  exports["runQuery"] = runQuery;
  exports["addEvent"] = addEvent;
  exports["syncAll"] = syncAll;
  exports["retrieveEvents"] = retrieveEvents;
  exports["showDBError"] = showDBError;
  exports["getDB"] = getDB;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Server.Migrations"] = $PS["Server.Migrations"] || {};
  var exports = $PS["Server.Migrations"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var runMigration = function (dictMonad) {
      return function (v) {
          return function (migration) {
              return Control_Monad_Except_Trans.runExceptT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(dictMonad))(Control_Monad_Except_Trans.ExceptT(v.executor.executeMigration(migration.id)(migration.up)))(function () {
                  return Control_Monad_Except_Trans.ExceptT(v.versionStore.updateVersion(true)(migration));
              }));
          };
      };
  };
  var remainingMigrations = function (dictOrd) {
      return function (v) {
          return function (migrations) {
              if (v instanceof Data_Maybe.Nothing) {
                  return migrations;
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Array.dropWhile(function (r) {
                      return Data_Ord.lessThanOrEq(dictOrd)(r.id)(v.value0);
                  })(Data_Array.sortWith(dictOrd)(function (v1) {
                      return v1.id;
                  })(migrations));
              };
              throw new Error("Failed pattern match at Server.Migrations (line 40, column 1 - line 40, column 111): " + [ v.constructor.name, migrations.constructor.name ]);
          };
      };
  };
  var migrationIds = Data_Functor.map(Data_Functor.functorArray)(function (v) {
      return v.id;
  });
  var migrate = function (dictShow) {
      return function (dictOrd) {
          return function (dictMonad) {
              return function (v) {
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonad))(v.migrationStore.loadMigrations)(function (migrations) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(dictMonad))(Control_Monad_Except_Trans.ExceptT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(v.logger("MIGRATION IDS: " + Data_Show.show(Data_Show.showArray(dictShow))(migrationIds(migrations))))))(function () {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonad))(v.versionStore.currentVersion)(function (currentVersion) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(dictMonad))(Control_Monad_Except_Trans.ExceptT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(v.logger("CURRENT VERSION: " + Data_Show.show(Data_Maybe.showMaybe(dictShow))(currentVersion)))))(function () {
                                  return Data_Functor["void"](Control_Monad_Except_Trans.functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Traversable["for"](Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Traversable.traversableArray)(remainingMigrations(dictOrd)(currentVersion)(migrations))((function () {
                                      var $43 = runMigration(dictMonad)(v);
                                      return function ($44) {
                                          return Control_Monad_Except_Trans.ExceptT($43($44));
                                      };
                                  })()));
                              });
                          });
                      });
                  }));
              };
          };
      };
  };
  exports["migrate"] = migrate;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Server.Migrations.MigrationData"] = $PS["Server.Migrations.MigrationData"] || {};
  var exports = $PS["Server.Migrations.MigrationData"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];                
  var validateMigrations = Data_Either.Right.create;
  var createEventsTable = function (id) {
      return {
          id: id,
          up: "\x0a          CREATE TABLE IF NOT EXISTS events (\x0a            id SERIAL PRIMARY KEY,\x0a            app TEXT NOT NULL,\x0a            event JSONB NOT NULL,\x0a            created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP\x0a          );\x0a        ",
          down: "\x0a          DROP TABLE IF EXISTS events;\x0a        ",
          description: "Create events table"
      };
  };
  var migrationData = [ createEventsTable(1) ];
  var migrationStore = function (dictMonad) {
      return {
          loadMigrations: Control_Applicative.pure(dictMonad.Applicative0())(validateMigrations(migrationData))
      };
  };
  exports["migrationStore"] = migrationStore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Server.Migrations.Postgres"] = $PS["Server.Migrations.Postgres"] || {};
  var exports = $PS["Server.Migrations.Postgres"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Database_PostgreSQL_PG = $PS["Database.PostgreSQL.PG"];
  var Database_PostgreSQL_Row = $PS["Database.PostgreSQL.Row"];
  var Database_PostgreSQL_Value = $PS["Database.PostgreSQL.Value"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Server_DB = $PS["Server.DB"];                
  var updateVersionQuery = "\x0a  INSERT INTO  _migrations (id, description, type) VALUES ($1, $2, $3);\x0a";
  var updateIntVersion = function (pool) {
      return function (isUp) {
          return function (migration) {
              var migrationType = (function () {
                  if (isUp) {
                      return "UP";
                  };
                  return "DOWN";
              })();
              return Control_Monad_Except_Trans.runExceptT(Control_Monad_Except_Trans.ExceptT(Data_Functor.map(Effect_Aff.functorAff)(Server_DB.showDBError)(Server_DB.runQuery(pool)(function (conn) {
                  return Database_PostgreSQL_PG.execute(Database_PostgreSQL_Row.toSQLRowRow3(Database_PostgreSQL_Value.toSQLValueInt)(Database_PostgreSQL_Value.toSQLValueString)(Database_PostgreSQL_Value.toSQLValueString))(Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff))(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(conn)(updateVersionQuery)(new Database_PostgreSQL_Row.Row3(migration.id, migration.description, migrationType));
              }))));
          };
      };
  };
  var retrieveVersionQuery = "\x0a  SELECT id FROM _migrations\x0a  ORDER BY created desc\x0a  LIMIT 1;\x0a";
  var executeMigration = function (dictShow) {
      return function (pool) {
          return function (id) {
              return function (query) {
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff))(Effect_Console.log("Running migration: " + Data_Show.show(dictShow)(id))))(function () {
                      return Control_Monad_Except_Trans.ExceptT(Data_Functor.map(Effect_Aff.functorAff)(Server_DB.showDBError)(Server_DB.runQuery(pool)(function (conn) {
                          return Database_PostgreSQL_PG.execute(Database_PostgreSQL_Row.toSQLRowRow0)(Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff))(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(conn)(query)(Database_PostgreSQL_Row.Row0.value);
                      })));
                  }));
              };
          };
      };
  };
  var executor = function (dictShow) {
      return function (pool) {
          return {
              executeMigration: executeMigration(dictShow)(pool)
          };
      };
  };
  var createTableQuery = "\x0a  CREATE TABLE IF NOT EXISTS _migrations\x0a  ( id INTEGER PRIMARY KEY\x0a  , description VARCHAR\x0a  , type VARCHAR NOT NULL\x0a  , created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP\x0a  );\x0a";
  var currentIntVersion = function (pool) {
      return Control_Monad_Except_Trans.runExceptT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Monad_Except_Trans.ExceptT(Data_Functor.map(Effect_Aff.functorAff)(Server_DB.showDBError)(Server_DB.runQuery(pool)(function (conn) {
          return Database_PostgreSQL_PG.execute(Database_PostgreSQL_Row.toSQLRowRow0)(Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff))(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(conn)(createTableQuery)(Database_PostgreSQL_Row.Row0.value);
      }))))(function () {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Monad_Except_Trans.ExceptT(Data_Functor.map(Effect_Aff.functorAff)(Server_DB.showDBError)(Server_DB.runQuery(pool)(function (conn) {
              return Database_PostgreSQL_PG.query(Database_PostgreSQL_Row.toSQLRowRow0)(Database_PostgreSQL_Row.fromSQLRowRow1(Database_PostgreSQL_Value.fromSQLValueInt))(Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff))(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff))(conn)(retrieveVersionQuery)(Database_PostgreSQL_Row.Row0.value);
          }))))(function (rows) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
                  return v.value0;
              })(Data_Array.head(rows)));
          });
      }));
  };
  var intVersionStore = function (pool) {
      return {
          currentVersion: currentIntVersion(pool),
          updateVersion: updateIntVersion(pool)
      };
  };
  exports["executor"] = executor;
  exports["intVersionStore"] = intVersionStore;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Type.Data.Row"] = $PS["Type.Data.Row"] || {};
  var exports = $PS["Type.Data.Row"];
  var RProxy = (function () {
      function RProxy() {

      };
      RProxy.value = new RProxy();
      return RProxy;
  })();
  exports["RProxy"] = RProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Type.Equality"] = $PS["Type.Equality"] || {};
  var exports = $PS["Type.Equality"];
  var TypeEquals = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  };
  var refl = new TypeEquals(function (a) {
      return a;
  }, function (a) {
      return a;
  });
  exports["to"] = to;
  exports["refl"] = refl;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["TypedEnv"] = $PS["TypedEnv"] || {};
  var exports = $PS["TypedEnv"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = $PS["Data.Generic.Rep.Show"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];
  var Type_Equality = $PS["Type.Equality"];                
  var EnvLookupError = (function () {
      function EnvLookupError(value0) {
          this.value0 = value0;
      };
      EnvLookupError.create = function (value0) {
          return new EnvLookupError(value0);
      };
      return EnvLookupError;
  })();
  var EnvParseError = (function () {
      function EnvParseError(value0) {
          this.value0 = value0;
      };
      EnvParseError.create = function (value0) {
          return new EnvParseError(value0);
      };
      return EnvParseError;
  })();
  var ReadValue = function (readValue) {
      this.readValue = readValue;
  };
  var ReadEnvFields = function (readEnvFields) {
      this.readEnvFields = readEnvFields;
  };
  var ReadEnv = function (readEnv) {
      this.readEnv = readEnv;
  };
  var ParseValue = function (parseValue) {
      this.parseValue = parseValue;
  };
  var readValue = function (dict) {
      return dict.readValue;
  };
  var readEnvFieldsNil = function (dictTypeEquals) {
      return new ReadEnvFields(function (v) {
          return function (v1) {
              return function (v2) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Type_Equality.to(dictTypeEquals)({}));
              };
          };
      });
  };
  var readEnvFields = function (dict) {
      return dict.readEnvFields;
  };
  var readEnvFieldsCons = function (dictIsSymbol) {
      return function (dictIsSymbol1) {
          return function (dictListToRow) {
              return function (dictReadEnvFields) {
                  return function (dictLacks) {
                      return function (dictCons) {
                          return function (dictReadValue) {
                              return new ReadEnvFields(function (v) {
                                  return function (v1) {
                                      return function (env) {
                                          var varName = Data_Symbol.reflectSymbol(dictIsSymbol1)(Data_Symbol.SProxy.value);
                                          var value = readValue(dictReadValue)(varName)(env);
                                          var tail = readEnvFields(dictReadEnvFields)(Type_Data_RowList.RLProxy.value)(Type_Data_RowList.RLProxy.value)(env);
                                          return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value))(value))(tail);
                                      };
                                  };
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  var readEnvImpl = function (dictRowToList) {
      return function (dictRowToList1) {
          return function (dictReadEnvFields) {
              return function (dictListToRow) {
                  return function (dictListToRow1) {
                      return new ReadEnv(function (v) {
                          return readEnvFields(dictReadEnvFields)(Type_Data_RowList.RLProxy.value)(Type_Data_RowList.RLProxy.value);
                      });
                  };
              };
          };
      };
  };
  var readEnv = function (dict) {
      return dict.readEnv;
  };
  var parseValueString = new ParseValue(Control_Applicative.pure(Data_Maybe.applicativeMaybe));
  var parseValueInt = new ParseValue(Data_Int.fromString);
  var parseValue = function (dict) {
      return dict.parseValue;
  };
  var readValueOptional = function (dictParseValue) {
      return new ReadValue(function (name) {
          return function (env) {
              var v = Foreign_Object.lookup(name)(env);
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Either.note(new EnvParseError(name))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(parseValue(dictParseValue)(v.value0)));
              };
              throw new Error("Failed pattern match at TypedEnv (line 102, column 5 - line 106, column 60): " + [ v.constructor.name ]);
          };
      });
  };
  var genericEnvError = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof EnvLookupError) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof EnvParseError) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at TypedEnv (line 57, column 1 - line 57, column 54): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new EnvLookupError(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new EnvParseError(x.value0);
      };
      throw new Error("Failed pattern match at TypedEnv (line 57, column 1 - line 57, column 54): " + [ x.constructor.name ]);
  });
  var showEnvError = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericEnvError)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "EnvLookupError";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
      return "EnvParseError";
  })))));
  var fromEnv = function (dictReadEnv) {
      return readEnv(dictReadEnv);
  };
  exports["fromEnv"] = fromEnv;
  exports["showEnvError"] = showEnvError;
  exports["parseValueInt"] = parseValueInt;
  exports["parseValueString"] = parseValueString;
  exports["readValueOptional"] = readValueOptional;
  exports["readEnvImpl"] = readEnvImpl;
  exports["readEnvFieldsCons"] = readEnvFieldsCons;
  exports["readEnvFieldsNil"] = readEnvFieldsNil;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Utils.Lens"] = $PS["Utils.Lens"] || {};
  var exports = $PS["Utils.Lens"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Record = $PS["Record"];                
  var Lens = (function () {
      function Lens(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Lens.create = function (value0) {
          return function (value1) {
              return new Lens(value0, value1);
          };
      };
      return Lens;
  })();
  var view = function (v) {
      return function (a) {
          return v.value0(a);
      };
  };
  var set = function (v) {
      return function (b) {
          return function (a) {
              return v.value1(a)(b);
          };
      };
  };
  var over = function (l) {
      return function (f) {
          return function (a) {
              return set(l)(f(view(l)(a)))(a);
          };
      };
  };
  var lens = Lens.create;
  var prop = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return lens(Record.get(dictIsSymbol)()(l))(Data_Function.flip(Record.set(dictIsSymbol)()()(l)));
          };
      };
  };
  var composeLenses = function (lensCD) {
      return function (lensBC) {
          var setter = function (b) {
              return function (d) {
                  return over(lensBC)(set(lensCD)(d))(b);
              };
          };
          var getter = function (b) {
              return view(lensCD)(view(lensBC)(b));
          };
          return lens(getter)(setter);
      };
  };
  var lensSemigroupoid = new Control_Semigroupoid.Semigroupoid(composeLenses);
  var _newtype = function (dictNewtype) {
      var setter = function (_a) {
          return function (b) {
              return Data_Newtype.wrap(dictNewtype)(b);
          };
      };
      var getter = function (a) {
          return Data_Newtype.unwrap(dictNewtype)(a);
      };
      return lens(getter)(setter);
  };
  exports["over"] = over;
  exports["prop"] = prop;
  exports["_newtype"] = _newtype;
  exports["lensSemigroupoid"] = lensSemigroupoid;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Server.Main"] = $PS["Server.Main"] || {};
  var exports = $PS["Server.Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CaseInsensitive = $PS["Data.String.CaseInsensitive"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];
  var Data_Unit = $PS["Data.Unit"];
  var Database_PostgreSQL = $PS["Database.PostgreSQL"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var HTTPure_Body = $PS["HTTPure.Body"];
  var HTTPure_Headers = $PS["HTTPure.Headers"];
  var HTTPure_Lookup = $PS["HTTPure.Lookup"];
  var HTTPure_Method = $PS["HTTPure.Method"];
  var HTTPure_Response = $PS["HTTPure.Response"];
  var Node_Process = $PS["Node.Process"];
  var Server_DB = $PS["Server.DB"];
  var Server_Migrations = $PS["Server.Migrations"];
  var Server_Migrations_MigrationData = $PS["Server.Migrations.MigrationData"];
  var Server_Migrations_Postgres = $PS["Server.Migrations.Postgres"];
  var Type_Data_Row = $PS["Type.Data.Row"];
  var Type_Equality = $PS["Type.Equality"];
  var TypedEnv = $PS["TypedEnv"];
  var Utils_Lens = $PS["Utils.Lens"];                
  var wrapResponseErrors = function (errorHandler) {
      return function (router) {
          return function (request) {
              return Control_Bind.bind(Effect_Aff.bindAff)(router(request))(function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.error(v.value0)))(function () {
                          return errorHandler(v.value0);
                      });
                  };
                  if (v instanceof Data_Either.Right) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.value0);
                  };
                  throw new Error("Failed pattern match at Server.Main (line 125, column 3 - line 129, column 28): " + [ v.constructor.name ]);
              });
          };
      };
  };
  var wrapBasicAuth = function (username) {
      return function (password) {
          return function (errorHandler) {
              return function (router) {
                  return function (req) {
                      var isAuthed = Data_Maybe.fromMaybe(false)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Data_String_CaseInsensitive.ordCaseInsensitiveString)(Data_Newtype.wrap(Data_String_CaseInsensitive.newtypeCaseInsensitiveString)("Authorization"))(Data_Newtype.unwrap(HTTPure_Headers.newtypeHeaders)(req.headers)))(function (authHeader) {
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(authHeader === username + (":" + password));
                      }));
                      if (isAuthed) {
                          return router(req);
                      };
                      return errorHandler("Unauthorized");
                  };
              };
          };
      };
  };
  var updateRequestValM = function (dictBind) {
      return function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Control_Bind.bind(dictBind)(f(v.val))(function (updated) {
                      return Control_Applicative.pure(dictApplicative)({
                          headers: v.headers,
                          httpVersion: v.httpVersion,
                          method: v.method,
                          path: v.path,
                          query: v.query,
                          body: v.body,
                          val: updated
                      });
                  });
              };
          };
      };
  };
  var updateRequestVal = function (f) {
      return function (v) {
          return {
              headers: v.headers,
              httpVersion: v.httpVersion,
              method: v.method,
              path: v.path,
              query: v.query,
              body: v.body,
              val: f(v.val)
          };
      };
  };
  var wrapDecodeJson = function (dictDecodeJson) {
      return function (errorHandler) {
          return function (router) {
              return function (req) {
                  var v = Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(Data_Tuple_Nested.get1(req.val));
                  if (v instanceof Data_Either.Left) {
                      return errorHandler(v.value0);
                  };
                  if (v instanceof Data_Either.Right) {
                      return router(updateRequestVal(Data_Function["const"](new Data_Tuple.Tuple(v.value0, Data_Tuple.snd(req.val))))(req));
                  };
                  throw new Error("Failed pattern match at Server.Main (line 113, column 42 - line 115, column 90): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var wrapGetQueryParam = function (key) {
      return function (errorHandler) {
          return function (router) {
              return function (req) {
                  var v = HTTPure_Lookup.lookup(HTTPure_Lookup.lookupObject)(req.query)(key);
                  if (v instanceof Data_Maybe.Just) {
                      return router(updateRequestVal(Data_Tuple.Tuple.create(v.value0))(req));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return errorHandler("Missing query parameter [" + (key + "]"));
                  };
                  throw new Error("Failed pattern match at Server.Main (line 149, column 3 - line 151, column 72): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var toJsonRequest = function (v) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(v.body))(function (json) {
          return Control_Applicative.pure(Data_Either.applicativeEither)({
              headers: v.headers,
              httpVersion: v.httpVersion,
              method: v.method,
              path: v.path,
              query: v.query,
              body: v.body,
              val: new Data_Tuple.Tuple(json, v.val)
          });
      });
  };
  var wrapJsonRequest = function (parseFail) {
      return function (router) {
          return function (req) {
              var v = toJsonRequest(req);
              if (v instanceof Data_Either.Left) {
                  return parseFail(v.value0);
              };
              if (v instanceof Data_Either.Right) {
                  return router(v.value0);
              };
              throw new Error("Failed pattern match at Server.Main (line 105, column 40 - line 107, column 44): " + [ v.constructor.name ]);
          };
      };
  };
  var toCustomRequest = function (v) {
      return {
          headers: v.headers,
          httpVersion: v.httpVersion,
          method: v.method,
          path: v.path,
          query: v.query,
          body: v.body,
          val: Data_Unit.unit
      };
  };
  var showError = function (dictShow) {
      return function (v) {
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left(Data_Show.show(dictShow)(v.value0));
          };
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(v.value0);
          };
          throw new Error("Failed pattern match at Server.Main (line 177, column 1 - line 177, column 67): " + [ v.constructor.name ]);
      };
  };
  var response = function (status) {
      return function (body) {
          return {
              headers: HTTPure_Headers.empty,
              status: status,
              body: body
          };
      };
  };
  var plainErrorHandler = function (msg) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(response(401)(msg));
  };
  var migrator = function (pool) {
      return {
          executor: Server_Migrations_Postgres.executor(Data_Show.showInt)(pool),
          migrationStore: Server_Migrations_MigrationData.migrationStore(Effect_Aff.monadAff),
          versionStore: Server_Migrations_Postgres.intVersionStore(pool),
          logger: (function () {
              var $85 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
              return function ($86) {
                  return $85(Effect_Console.log($86));
              };
          })()
      };
  };
  var logError = function (e) {
      return Control_Bind.bind(Effect_Aff.bindAff)(e)(function (r) {
          if (r instanceof Data_Either.Left) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log("ERROR: " + r.value0));
          };
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
      });
  };
  var jsonResponse = function (dictEncodeJson) {
      return function (status) {
          var $87 = response(status);
          var $88 = Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson);
          return function ($89) {
              return $87($88($89));
          };
      };
  };
  var okJsonResponse = function (dictEncodeJson) {
      return jsonResponse(dictEncodeJson)(200);
  };
  var retrieveEventsHandler = function (pool) {
      return function (req) {
          var eventApp = Data_Tuple.fst(req.val);
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(showError(Database_PostgreSQL.showPGError))(Server_DB.retrieveEvents(eventApp)(pool)))(function (events) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Either.functorEither)(okJsonResponse(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJson)))(events));
          });
      };
  };
  var successResponse = okJsonResponse(Data_Argonaut_Encode_Class.encodeJsonJson)(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "message";
  }))())())({
      message: "Success"
  }));
  var syncEventsHandler = function (pool) {
      return function (req) {
          var jsonArr = Data_Tuple_Nested.get1(req.val);
          var eventApp = Data_Tuple_Nested.get2(req.val);
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(showError(Database_PostgreSQL.showPGError))(Server_DB.syncAll(eventApp)(jsonArr)(pool)))(function (result) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Either.functorEither)(Data_Function["const"](successResponse))(result));
          });
      };
  };
  var jsonErrorHandler = function (error) {
      var json = Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
          return "error";
      }))())())({
          error: error
      });
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(jsonResponse(Data_Argonaut_Encode_Class.encodeJsonJson)(500)(json));
  };
  var jsonBadRequestHandler = function (error) {
      var json = Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
          return "error";
      }))())())({
          error: error
      });
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(jsonResponse(Data_Argonaut_Encode_Class.encodeJsonJson)(400)(json));
  };
  var fromCustomResponse = function (r) {
      return Control_Bind.bind(Effect_Aff.bindAff)(HTTPure_Response.response(Effect_Aff_Class.monadAffAff)(HTTPure_Body.bodyString)(r.status)(r.body))(function (res) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
              headers: r.headers,
              status: res.status,
              writeBody: res.writeBody
          });
      });
  };
  var wrapCustom = function (router) {
      return function (request) {
          return Control_Bind.bind(Effect_Aff.bindAff)(router(toCustomRequest(request)))(function (res) {
              return fromCustomResponse(res);
          });
      };
  };
  var emptyResponse = function (status) {
      return response(status)(Data_Unit.unit);
  };
  var affErrorHandler = function (dictShow) {
      return function (v) {
          if (v instanceof Data_Either.Left) {
              return Effect_Console.log("ERROR: " + Data_Show.show(dictShow)(v.value0));
          };
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  };
  var main = Data_Functor["void"](Effect.functorEffect)(Effect_Aff.runAff(affErrorHandler(Effect_Exception.showError))(logError(Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Monad_Except_Trans.ExceptT(Data_Functor.map(Effect_Aff.functorAff)(showError(TypedEnv.showEnvError))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(TypedEnv.fromEnv(TypedEnv.readEnvImpl()()(TypedEnv.readEnvFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "databaseUri";
  }))(new Data_Symbol.IsSymbol(function () {
      return "DATABASE_URI";
  }))()(TypedEnv.readEnvFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "port";
  }))(new Data_Symbol.IsSymbol(function () {
      return "PORT";
  }))()(TypedEnv.readEnvFieldsNil(Type_Equality.refl))()()(TypedEnv.readValueOptional(TypedEnv.parseValueInt)))()()(TypedEnv.readValueOptional(TypedEnv.parseValueString)))()())(Type_Data_Row.RProxy.value))(Node_Process.getEnv)))))(function (config) {
      var port = Data_Maybe.fromMaybe(8080)(config.port);
      var dbUri = Data_Maybe.fromMaybe("postgres://localhost:5432/events_store")(config.databaseUri);
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Monad_Except_Trans.ExceptT(Data_Functor.map(Effect_Aff.functorAff)(showError(Data_Show.showString))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Server_DB.getDB(dbUri)))))(function (pool) {
          return Control_Monad_Except_Trans.ExceptT(Server_Migrations.migrate(Data_Show.showInt)(Data_Ord.ordInt)(Effect_Aff.monadAff)(migrator(pool)));
      });
  })))));
  var addEventsHandler = function (pool) {
      return function (req) {
          var json = Data_Tuple_Nested.get1(req.val);
          var eventApp = Data_Tuple_Nested.get2(req.val);
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(showError(Database_PostgreSQL.showPGError))(Server_DB.addEvent(eventApp)(json)(pool)))(function (result) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Either.functorEither)(Data_Function["const"](successResponse))(result));
          });
      };
  };
  var _headers = Utils_Lens.prop(new Data_Symbol.IsSymbol(function () {
      return "headers";
  }))()(Data_Symbol.SProxy.value);
  var addResponseHeader = function (k) {
      return function (v) {
          return Utils_Lens.over(Control_Semigroupoid.composeFlipped(Utils_Lens.lensSemigroupoid)(_headers)(Utils_Lens["_newtype"](HTTPure_Headers.newtypeHeaders)))(Data_Map_Internal.insert(Data_String_CaseInsensitive.ordCaseInsensitiveString)(Data_Newtype.wrap(Data_String_CaseInsensitive.newtypeCaseInsensitiveString)(k))(v));
      };
  };
  var fromJsonResponse = function (v) {
      return addResponseHeader("Content-Type")("application/json")({
          headers: v.headers,
          status: v.status,
          body: Data_Argonaut_Core.stringify(v.body)
      });
  };
  var wrapJsonResponse = function (router) {
      return function (request) {
          return Control_Bind.bind(Effect_Aff.bindAff)(router(request))(function (res) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(fromJsonResponse(res));
          });
      };
  };
  var baseRouter = function (pool) {
      return function (v) {
          if (v.method instanceof HTTPure_Method.Get) {
              return wrapBasicAuth("john")("bobbydazzler")(plainErrorHandler)(wrapJsonResponse(wrapGetQueryParam("app")(jsonBadRequestHandler)(wrapResponseErrors(jsonErrorHandler)(retrieveEventsHandler(pool)))))(v);
          };
          if (v.method instanceof HTTPure_Method.Options) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(response(200)(""));
          };
          if (v.method instanceof HTTPure_Method.Post && (v.path.length === 1 && v["path"][0] === "sync")) {
              return wrapBasicAuth("john")("bobbydazzler")(plainErrorHandler)(wrapJsonResponse(wrapGetQueryParam("app")(jsonBadRequestHandler)(wrapJsonRequest(jsonBadRequestHandler)(wrapDecodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonJson))(jsonBadRequestHandler)(wrapResponseErrors(jsonErrorHandler)(syncEventsHandler(pool)))))))(v);
          };
          if (v.method instanceof HTTPure_Method.Post) {
              return wrapBasicAuth("john")("bobbydazzler")(plainErrorHandler)(wrapJsonResponse(wrapGetQueryParam("app")(jsonBadRequestHandler)(wrapJsonRequest(jsonBadRequestHandler)(wrapResponseErrors(jsonErrorHandler)(addEventsHandler(pool))))))(v);
          };
          return wrapJsonResponse(Data_Function["const"](Control_Applicative.pure(Effect_Aff.applicativeAff)(jsonResponse(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJString)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
              return "response";
          }))())())(404)({
              response: "not found"
          }))))(v);
      };
  };
  var wrapCors = function (router) {
      return function (req) {
          return Control_Bind.bind(Effect_Aff.bindAff)(router(req))(function (res) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(addResponseHeader("Access-Control-Allow-Origin")("*")(addResponseHeader("Access-Control-Allow-Headers")("*")(res)));
          });
      };
  };
  var app = function (pool) {
      return wrapCustom(wrapCors(baseRouter(pool)));
  };
  exports["_headers"] = _headers;
  exports["updateRequestVal"] = updateRequestVal;
  exports["updateRequestValM"] = updateRequestValM;
  exports["response"] = response;
  exports["emptyResponse"] = emptyResponse;
  exports["jsonResponse"] = jsonResponse;
  exports["okJsonResponse"] = okJsonResponse;
  exports["toCustomRequest"] = toCustomRequest;
  exports["fromCustomResponse"] = fromCustomResponse;
  exports["toJsonRequest"] = toJsonRequest;
  exports["addResponseHeader"] = addResponseHeader;
  exports["fromJsonResponse"] = fromJsonResponse;
  exports["wrapJsonRequest"] = wrapJsonRequest;
  exports["wrapDecodeJson"] = wrapDecodeJson;
  exports["wrapJsonResponse"] = wrapJsonResponse;
  exports["wrapResponseErrors"] = wrapResponseErrors;
  exports["jsonErrorHandler"] = jsonErrorHandler;
  exports["jsonBadRequestHandler"] = jsonBadRequestHandler;
  exports["retrieveEventsHandler"] = retrieveEventsHandler;
  exports["wrapGetQueryParam"] = wrapGetQueryParam;
  exports["wrapCors"] = wrapCors;
  exports["wrapBasicAuth"] = wrapBasicAuth;
  exports["successResponse"] = successResponse;
  exports["showError"] = showError;
  exports["addEventsHandler"] = addEventsHandler;
  exports["syncEventsHandler"] = syncEventsHandler;
  exports["baseRouter"] = baseRouter;
  exports["wrapCustom"] = wrapCustom;
  exports["plainErrorHandler"] = plainErrorHandler;
  exports["app"] = app;
  exports["logError"] = logError;
  exports["migrator"] = migrator;
  exports["affErrorHandler"] = affErrorHandler;
  exports["main"] = main;
})(PS);
PS["Server.Main"].main();